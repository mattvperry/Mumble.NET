// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mumble.NET {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public static partial class Messages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_MumbleProto_Version__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Version, global::Mumble.NET.Version.Builder> internal__static_MumbleProto_Version__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UDPTunnel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UDPTunnel, global::Mumble.NET.UDPTunnel.Builder> internal__static_MumbleProto_UDPTunnel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_Authenticate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Authenticate, global::Mumble.NET.Authenticate.Builder> internal__static_MumbleProto_Authenticate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_Ping__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Ping, global::Mumble.NET.Ping.Builder> internal__static_MumbleProto_Ping__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_Reject__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Reject, global::Mumble.NET.Reject.Builder> internal__static_MumbleProto_Reject__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ServerSync__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ServerSync, global::Mumble.NET.ServerSync.Builder> internal__static_MumbleProto_ServerSync__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ChannelRemove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ChannelRemove, global::Mumble.NET.ChannelRemove.Builder> internal__static_MumbleProto_ChannelRemove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ChannelState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ChannelState, global::Mumble.NET.ChannelState.Builder> internal__static_MumbleProto_ChannelState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UserRemove__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserRemove, global::Mumble.NET.UserRemove.Builder> internal__static_MumbleProto_UserRemove__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UserState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserState, global::Mumble.NET.UserState.Builder> internal__static_MumbleProto_UserState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_BanList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.BanList, global::Mumble.NET.BanList.Builder> internal__static_MumbleProto_BanList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_BanList_BanEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.BanList.Types.BanEntry, global::Mumble.NET.BanList.Types.BanEntry.Builder> internal__static_MumbleProto_BanList_BanEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_TextMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.TextMessage, global::Mumble.NET.TextMessage.Builder> internal__static_MumbleProto_TextMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_PermissionDenied__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.PermissionDenied, global::Mumble.NET.PermissionDenied.Builder> internal__static_MumbleProto_PermissionDenied__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ACL__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ACL, global::Mumble.NET.ACL.Builder> internal__static_MumbleProto_ACL__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ACL_ChanGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ACL.Types.ChanGroup, global::Mumble.NET.ACL.Types.ChanGroup.Builder> internal__static_MumbleProto_ACL_ChanGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ACL_ChanACL__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ACL.Types.ChanACL, global::Mumble.NET.ACL.Types.ChanACL.Builder> internal__static_MumbleProto_ACL_ChanACL__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_QueryUsers__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.QueryUsers, global::Mumble.NET.QueryUsers.Builder> internal__static_MumbleProto_QueryUsers__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_CryptSetup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.CryptSetup, global::Mumble.NET.CryptSetup.Builder> internal__static_MumbleProto_CryptSetup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ContextActionModify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ContextActionModify, global::Mumble.NET.ContextActionModify.Builder> internal__static_MumbleProto_ContextActionModify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ContextAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ContextAction, global::Mumble.NET.ContextAction.Builder> internal__static_MumbleProto_ContextAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UserList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserList, global::Mumble.NET.UserList.Builder> internal__static_MumbleProto_UserList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UserList_User__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserList.Types.User, global::Mumble.NET.UserList.Types.User.Builder> internal__static_MumbleProto_UserList_User__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_VoiceTarget__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.VoiceTarget, global::Mumble.NET.VoiceTarget.Builder> internal__static_MumbleProto_VoiceTarget__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_VoiceTarget_Target__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.VoiceTarget.Types.Target, global::Mumble.NET.VoiceTarget.Types.Target.Builder> internal__static_MumbleProto_VoiceTarget_Target__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_PermissionQuery__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.PermissionQuery, global::Mumble.NET.PermissionQuery.Builder> internal__static_MumbleProto_PermissionQuery__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_CodecVersion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.CodecVersion, global::Mumble.NET.CodecVersion.Builder> internal__static_MumbleProto_CodecVersion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UserStats__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserStats, global::Mumble.NET.UserStats.Builder> internal__static_MumbleProto_UserStats__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_UserStats_Stats__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserStats.Types.Stats, global::Mumble.NET.UserStats.Types.Stats.Builder> internal__static_MumbleProto_UserStats_Stats__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_RequestBlob__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.RequestBlob, global::Mumble.NET.RequestBlob.Builder> internal__static_MumbleProto_RequestBlob__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_ServerConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ServerConfig, global::Mumble.NET.ServerConfig.Builder> internal__static_MumbleProto_ServerConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MumbleProto_SuggestConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.SuggestConfig, global::Mumble.NET.SuggestConfig.Builder> internal__static_MumbleProto_SuggestConfig__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Messages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxNdW1ibGUucHJvdG8SC011bWJsZVByb3RvIksKB1ZlcnNpb24SDwoHdmVy", 
            "c2lvbhgBIAEoDRIPCgdyZWxlYXNlGAIgASgJEgoKAm9zGAMgASgJEhIKCm9z", 
            "X3ZlcnNpb24YBCABKAkiGwoJVURQVHVubmVsEg4KBnBhY2tldBgBIAIoDCJu", 
            "CgxBdXRoZW50aWNhdGUSEAoIdXNlcm5hbWUYASABKAkSEAoIcGFzc3dvcmQY", 
            "AiABKAkSDgoGdG9rZW5zGAMgAygJEhUKDWNlbHRfdmVyc2lvbnMYBCADKAUS", 
            "EwoEb3B1cxgFIAEoCDoFZmFsc2Ui1QEKBFBpbmcSEQoJdGltZXN0YW1wGAEg", 
            "ASgEEgwKBGdvb2QYAiABKA0SDAoEbGF0ZRgDIAEoDRIMCgRsb3N0GAQgASgN", 
            "Eg4KBnJlc3luYxgFIAEoDRITCgt1ZHBfcGFja2V0cxgGIAEoDRITCgt0Y3Bf", 
            "cGFja2V0cxgHIAEoDRIUCgx1ZHBfcGluZ19hdmcYCCABKAISFAoMdWRwX3Bp", 
            "bmdfdmFyGAkgASgCEhQKDHRjcF9waW5nX2F2ZxgKIAEoAhIUCgx0Y3BfcGlu", 
            "Z192YXIYCyABKAIi9wEKBlJlamVjdBIsCgR0eXBlGAEgASgOMh4uTXVtYmxl", 
            "UHJvdG8uUmVqZWN0LlJlamVjdFR5cGUSDgoGcmVhc29uGAIgASgJIq4BCgpS", 
            "ZWplY3RUeXBlEggKBE5vbmUQABIQCgxXcm9uZ1ZlcnNpb24QARITCg9JbnZh", 
            "bGlkVXNlcm5hbWUQAhIPCgtXcm9uZ1VzZXJQVxADEhEKDVdyb25nU2VydmVy", 
            "UFcQBBIRCg1Vc2VybmFtZUluVXNlEAUSDgoKU2VydmVyRnVsbBAGEhEKDU5v", 
            "Q2VydGlmaWNhdGUQBxIVChFBdXRoZW50aWNhdG9yRmFpbBAIIl8KClNlcnZl", 
            "clN5bmMSDwoHc2Vzc2lvbhgBIAEoDRIVCg1tYXhfYmFuZHdpZHRoGAIgASgN", 
            "EhQKDHdlbGNvbWVfdGV4dBgDIAEoCRITCgtwZXJtaXNzaW9ucxgEIAEoBCIj", 
            "Cg1DaGFubmVsUmVtb3ZlEhIKCmNoYW5uZWxfaWQYASACKA0i1gEKDENoYW5u", 
            "ZWxTdGF0ZRISCgpjaGFubmVsX2lkGAEgASgNEg4KBnBhcmVudBgCIAEoDRIM", 
            "CgRuYW1lGAMgASgJEg0KBWxpbmtzGAQgAygNEhMKC2Rlc2NyaXB0aW9uGAUg", 
            "ASgJEhEKCWxpbmtzX2FkZBgGIAMoDRIUCgxsaW5rc19yZW1vdmUYByADKA0S", 
            "GAoJdGVtcG9yYXJ5GAggASgIOgVmYWxzZRITCghwb3NpdGlvbhgJIAEoBToB", 
            "MBIYChBkZXNjcmlwdGlvbl9oYXNoGAogASgMIkkKClVzZXJSZW1vdmUSDwoH", 
            "c2Vzc2lvbhgBIAIoDRINCgVhY3RvchgCIAEoDRIOCgZyZWFzb24YAyABKAkS", 
            "CwoDYmFuGAQgASgIIuwCCglVc2VyU3RhdGUSDwoHc2Vzc2lvbhgBIAEoDRIN", 
            "CgVhY3RvchgCIAEoDRIMCgRuYW1lGAMgASgJEg8KB3VzZXJfaWQYBCABKA0S", 
            "EgoKY2hhbm5lbF9pZBgFIAEoDRIMCgRtdXRlGAYgASgIEgwKBGRlYWYYByAB", 
            "KAgSEAoIc3VwcHJlc3MYCCABKAgSEQoJc2VsZl9tdXRlGAkgASgIEhEKCXNl", 
            "bGZfZGVhZhgKIAEoCBIPCgd0ZXh0dXJlGAsgASgMEhYKDnBsdWdpbl9jb250", 
            "ZXh0GAwgASgMEhcKD3BsdWdpbl9pZGVudGl0eRgNIAEoCRIPCgdjb21tZW50", 
            "GA4gASgJEgwKBGhhc2gYDyABKAkSFAoMY29tbWVudF9oYXNoGBAgASgMEhQK", 
            "DHRleHR1cmVfaGFzaBgRIAEoDBIYChBwcmlvcml0eV9zcGVha2VyGBIgASgI", 
            "EhEKCXJlY29yZGluZxgTIAEoCCLEAQoHQmFuTGlzdBIrCgRiYW5zGAEgAygL", 
            "Mh0uTXVtYmxlUHJvdG8uQmFuTGlzdC5CYW5FbnRyeRIUCgVxdWVyeRgCIAEo", 
            "CDoFZmFsc2UadgoIQmFuRW50cnkSDwoHYWRkcmVzcxgBIAIoDBIMCgRtYXNr", 
            "GAIgAigNEgwKBG5hbWUYAyABKAkSDAoEaGFzaBgEIAEoCRIOCgZyZWFzb24Y", 
            "BSABKAkSDQoFc3RhcnQYBiABKAkSEAoIZHVyYXRpb24YByABKA0iYwoLVGV4", 
            "dE1lc3NhZ2USDQoFYWN0b3IYASABKA0SDwoHc2Vzc2lvbhgCIAMoDRISCgpj", 
            "aGFubmVsX2lkGAMgAygNEg8KB3RyZWVfaWQYBCADKA0SDwoHbWVzc2FnZRgF", 
            "IAIoCSLfAgoQUGVybWlzc2lvbkRlbmllZBISCgpwZXJtaXNzaW9uGAEgASgN", 
            "EhIKCmNoYW5uZWxfaWQYAiABKA0SDwoHc2Vzc2lvbhgDIAEoDRIOCgZyZWFz", 
            "b24YBCABKAkSNAoEdHlwZRgFIAEoDjImLk11bWJsZVByb3RvLlBlcm1pc3Np", 
            "b25EZW5pZWQuRGVueVR5cGUSDAoEbmFtZRgGIAEoCSK9AQoIRGVueVR5cGUS", 
            "CAoEVGV4dBAAEg4KClBlcm1pc3Npb24QARINCglTdXBlclVzZXIQAhIPCgtD", 
            "aGFubmVsTmFtZRADEg8KC1RleHRUb29Mb25nEAQSBwoDSDlLEAUSFAoQVGVt", 
            "cG9yYXJ5Q2hhbm5lbBAGEhYKEk1pc3NpbmdDZXJ0aWZpY2F0ZRAHEgwKCFVz", 
            "ZXJOYW1lEAgSDwoLQ2hhbm5lbEZ1bGwQCRIQCgxOZXN0aW5nTGltaXQQCiLU", 
            "AwoDQUNMEhIKCmNoYW5uZWxfaWQYASACKA0SGgoMaW5oZXJpdF9hY2xzGAIg", 
            "ASgIOgR0cnVlEioKBmdyb3VwcxgDIAMoCzIaLk11bWJsZVByb3RvLkFDTC5D", 
            "aGFuR3JvdXASJgoEYWNscxgEIAMoCzIYLk11bWJsZVByb3RvLkFDTC5DaGFu", 
            "QUNMEhQKBXF1ZXJ5GAUgASgIOgVmYWxzZRqcAQoJQ2hhbkdyb3VwEgwKBG5h", 
            "bWUYASACKAkSFwoJaW5oZXJpdGVkGAIgASgIOgR0cnVlEhUKB2luaGVyaXQY", 
            "AyABKAg6BHRydWUSGQoLaW5oZXJpdGFibGUYBCABKAg6BHRydWUSCwoDYWRk", 
            "GAUgAygNEg4KBnJlbW92ZRgGIAMoDRIZChFpbmhlcml0ZWRfbWVtYmVycxgH", 
            "IAMoDRqTAQoHQ2hhbkFDTBIYCgphcHBseV9oZXJlGAEgASgIOgR0cnVlEhgK", 
            "CmFwcGx5X3N1YnMYAiABKAg6BHRydWUSFwoJaW5oZXJpdGVkGAMgASgIOgR0", 
            "cnVlEg8KB3VzZXJfaWQYBCABKA0SDQoFZ3JvdXAYBSABKAkSDQoFZ3JhbnQY", 
            "BiABKA0SDAoEZGVueRgHIAEoDSIoCgpRdWVyeVVzZXJzEgsKA2lkcxgBIAMo", 
            "DRINCgVuYW1lcxgCIAMoCSJFCgpDcnlwdFNldHVwEgsKA2tleRgBIAEoDBIU", 
            "CgxjbGllbnRfbm9uY2UYAiABKAwSFAoMc2VydmVyX25vbmNlGAMgASgMItMB", 
            "ChNDb250ZXh0QWN0aW9uTW9kaWZ5Eg4KBmFjdGlvbhgBIAIoCRIMCgR0ZXh0", 
            "GAIgASgJEg8KB2NvbnRleHQYAyABKA0SPQoJb3BlcmF0aW9uGAQgASgOMiou", 
            "TXVtYmxlUHJvdG8uQ29udGV4dEFjdGlvbk1vZGlmeS5PcGVyYXRpb24iLAoH", 
            "Q29udGV4dBIKCgZTZXJ2ZXIQARILCgdDaGFubmVsEAISCAoEVXNlchAEIiAK", 
            "CU9wZXJhdGlvbhIHCgNBZGQQABIKCgZSZW1vdmUQASJECg1Db250ZXh0QWN0", 
            "aW9uEg8KB3Nlc3Npb24YASABKA0SEgoKY2hhbm5lbF9pZBgCIAEoDRIOCgZh", 
            "Y3Rpb24YAyACKAkihQEKCFVzZXJMaXN0EikKBXVzZXJzGAEgAygLMhouTXVt", 
            "YmxlUHJvdG8uVXNlckxpc3QuVXNlchpOCgRVc2VyEg8KB3VzZXJfaWQYASAC", 
            "KA0SDAoEbmFtZRgCIAEoCRIRCglsYXN0X3NlZW4YAyABKAkSFAoMbGFzdF9j", 
            "aGFubmVsGAQgASgNIrgBCgtWb2ljZVRhcmdldBIKCgJpZBgBIAEoDRIwCgd0", 
            "YXJnZXRzGAIgAygLMh8uTXVtYmxlUHJvdG8uVm9pY2VUYXJnZXQuVGFyZ2V0", 
            "GmsKBlRhcmdldBIPCgdzZXNzaW9uGAEgAygNEhIKCmNoYW5uZWxfaWQYAiAB", 
            "KA0SDQoFZ3JvdXAYAyABKAkSFAoFbGlua3MYBCABKAg6BWZhbHNlEhcKCGNo", 
            "aWxkcmVuGAUgASgIOgVmYWxzZSJQCg9QZXJtaXNzaW9uUXVlcnkSEgoKY2hh", 
            "bm5lbF9pZBgBIAEoDRITCgtwZXJtaXNzaW9ucxgCIAEoDRIUCgVmbHVzaBgD", 
            "IAEoCDoFZmFsc2UiXAoMQ29kZWNWZXJzaW9uEg0KBWFscGhhGAEgAigFEgwK", 
            "BGJldGEYAiACKAUSGgoMcHJlZmVyX2FscGhhGAMgAigIOgR0cnVlEhMKBG9w", 
            "dXMYBCABKAg6BWZhbHNlIrgECglVc2VyU3RhdHMSDwoHc2Vzc2lvbhgBIAEo", 
            "DRIZCgpzdGF0c19vbmx5GAIgASgIOgVmYWxzZRIUCgxjZXJ0aWZpY2F0ZXMY", 
            "AyADKAwSMQoLZnJvbV9jbGllbnQYBCABKAsyHC5NdW1ibGVQcm90by5Vc2Vy", 
            "U3RhdHMuU3RhdHMSMQoLZnJvbV9zZXJ2ZXIYBSABKAsyHC5NdW1ibGVQcm90", 
            "by5Vc2VyU3RhdHMuU3RhdHMSEwoLdWRwX3BhY2tldHMYBiABKA0SEwoLdGNw", 
            "X3BhY2tldHMYByABKA0SFAoMdWRwX3BpbmdfYXZnGAggASgCEhQKDHVkcF9w", 
            "aW5nX3ZhchgJIAEoAhIUCgx0Y3BfcGluZ19hdmcYCiABKAISFAoMdGNwX3Bp", 
            "bmdfdmFyGAsgASgCEiUKB3ZlcnNpb24YDCABKAsyFC5NdW1ibGVQcm90by5W", 
            "ZXJzaW9uEhUKDWNlbHRfdmVyc2lvbnMYDSADKAUSDwoHYWRkcmVzcxgOIAEo", 
            "DBIRCgliYW5kd2lkdGgYDyABKA0SEgoKb25saW5lc2VjcxgQIAEoDRIQCghp", 
            "ZGxlc2VjcxgRIAEoDRIhChJzdHJvbmdfY2VydGlmaWNhdGUYEiABKAg6BWZh", 
            "bHNlEhMKBG9wdXMYEyABKAg6BWZhbHNlGkEKBVN0YXRzEgwKBGdvb2QYASAB", 
            "KA0SDAoEbGF0ZRgCIAEoDRIMCgRsb3N0GAMgASgNEg4KBnJlc3luYxgEIAEo", 
            "DSJcCgtSZXF1ZXN0QmxvYhIXCg9zZXNzaW9uX3RleHR1cmUYASADKA0SFwoP", 
            "c2Vzc2lvbl9jb21tZW50GAIgAygNEhsKE2NoYW5uZWxfZGVzY3JpcHRpb24Y", 
            "AyADKA0ihQEKDFNlcnZlckNvbmZpZxIVCg1tYXhfYmFuZHdpZHRoGAEgASgN", 
            "EhQKDHdlbGNvbWVfdGV4dBgCIAEoCRISCgphbGxvd19odG1sGAMgASgIEhYK", 
            "Dm1lc3NhZ2VfbGVuZ3RoGAQgASgNEhwKFGltYWdlX21lc3NhZ2VfbGVuZ3Ro", 
            "GAUgASgNIkoKDVN1Z2dlc3RDb25maWcSDwoHdmVyc2lvbhgBIAEoDRISCgpw", 
          "b3NpdGlvbmFsGAIgASgIEhQKDHB1c2hfdG9fdGFsaxgDIAEoCEICSAE="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_MumbleProto_Version__Descriptor = Descriptor.MessageTypes[0];
        internal__static_MumbleProto_Version__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Version, global::Mumble.NET.Version.Builder>(internal__static_MumbleProto_Version__Descriptor,
                new string[] { "Version_", "Release", "Os", "OsVersion", });
        internal__static_MumbleProto_UDPTunnel__Descriptor = Descriptor.MessageTypes[1];
        internal__static_MumbleProto_UDPTunnel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UDPTunnel, global::Mumble.NET.UDPTunnel.Builder>(internal__static_MumbleProto_UDPTunnel__Descriptor,
                new string[] { "Packet", });
        internal__static_MumbleProto_Authenticate__Descriptor = Descriptor.MessageTypes[2];
        internal__static_MumbleProto_Authenticate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Authenticate, global::Mumble.NET.Authenticate.Builder>(internal__static_MumbleProto_Authenticate__Descriptor,
                new string[] { "Username", "Password", "Tokens", "CeltVersions", "Opus", });
        internal__static_MumbleProto_Ping__Descriptor = Descriptor.MessageTypes[3];
        internal__static_MumbleProto_Ping__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Ping, global::Mumble.NET.Ping.Builder>(internal__static_MumbleProto_Ping__Descriptor,
                new string[] { "Timestamp", "Good", "Late", "Lost", "Resync", "UdpPackets", "TcpPackets", "UdpPingAvg", "UdpPingVar", "TcpPingAvg", "TcpPingVar", });
        internal__static_MumbleProto_Reject__Descriptor = Descriptor.MessageTypes[4];
        internal__static_MumbleProto_Reject__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.Reject, global::Mumble.NET.Reject.Builder>(internal__static_MumbleProto_Reject__Descriptor,
                new string[] { "Type", "Reason", });
        internal__static_MumbleProto_ServerSync__Descriptor = Descriptor.MessageTypes[5];
        internal__static_MumbleProto_ServerSync__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ServerSync, global::Mumble.NET.ServerSync.Builder>(internal__static_MumbleProto_ServerSync__Descriptor,
                new string[] { "Session", "MaxBandwidth", "WelcomeText", "Permissions", });
        internal__static_MumbleProto_ChannelRemove__Descriptor = Descriptor.MessageTypes[6];
        internal__static_MumbleProto_ChannelRemove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ChannelRemove, global::Mumble.NET.ChannelRemove.Builder>(internal__static_MumbleProto_ChannelRemove__Descriptor,
                new string[] { "ChannelId", });
        internal__static_MumbleProto_ChannelState__Descriptor = Descriptor.MessageTypes[7];
        internal__static_MumbleProto_ChannelState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ChannelState, global::Mumble.NET.ChannelState.Builder>(internal__static_MumbleProto_ChannelState__Descriptor,
                new string[] { "ChannelId", "Parent", "Name", "Links", "Description", "LinksAdd", "LinksRemove", "Temporary", "Position", "DescriptionHash", });
        internal__static_MumbleProto_UserRemove__Descriptor = Descriptor.MessageTypes[8];
        internal__static_MumbleProto_UserRemove__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserRemove, global::Mumble.NET.UserRemove.Builder>(internal__static_MumbleProto_UserRemove__Descriptor,
                new string[] { "Session", "Actor", "Reason", "Ban", });
        internal__static_MumbleProto_UserState__Descriptor = Descriptor.MessageTypes[9];
        internal__static_MumbleProto_UserState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserState, global::Mumble.NET.UserState.Builder>(internal__static_MumbleProto_UserState__Descriptor,
                new string[] { "Session", "Actor", "Name", "UserId", "ChannelId", "Mute", "Deaf", "Suppress", "SelfMute", "SelfDeaf", "Texture", "PluginContext", "PluginIdentity", "Comment", "Hash", "CommentHash", "TextureHash", "PrioritySpeaker", "Recording", });
        internal__static_MumbleProto_BanList__Descriptor = Descriptor.MessageTypes[10];
        internal__static_MumbleProto_BanList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.BanList, global::Mumble.NET.BanList.Builder>(internal__static_MumbleProto_BanList__Descriptor,
                new string[] { "Bans", "Query", });
        internal__static_MumbleProto_BanList_BanEntry__Descriptor = internal__static_MumbleProto_BanList__Descriptor.NestedTypes[0];
        internal__static_MumbleProto_BanList_BanEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.BanList.Types.BanEntry, global::Mumble.NET.BanList.Types.BanEntry.Builder>(internal__static_MumbleProto_BanList_BanEntry__Descriptor,
                new string[] { "Address", "Mask", "Name", "Hash", "Reason", "Start", "Duration", });
        internal__static_MumbleProto_TextMessage__Descriptor = Descriptor.MessageTypes[11];
        internal__static_MumbleProto_TextMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.TextMessage, global::Mumble.NET.TextMessage.Builder>(internal__static_MumbleProto_TextMessage__Descriptor,
                new string[] { "Actor", "Session", "ChannelId", "TreeId", "Message", });
        internal__static_MumbleProto_PermissionDenied__Descriptor = Descriptor.MessageTypes[12];
        internal__static_MumbleProto_PermissionDenied__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.PermissionDenied, global::Mumble.NET.PermissionDenied.Builder>(internal__static_MumbleProto_PermissionDenied__Descriptor,
                new string[] { "Permission", "ChannelId", "Session", "Reason", "Type", "Name", });
        internal__static_MumbleProto_ACL__Descriptor = Descriptor.MessageTypes[13];
        internal__static_MumbleProto_ACL__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ACL, global::Mumble.NET.ACL.Builder>(internal__static_MumbleProto_ACL__Descriptor,
                new string[] { "ChannelId", "InheritAcls", "Groups", "Acls", "Query", });
        internal__static_MumbleProto_ACL_ChanGroup__Descriptor = internal__static_MumbleProto_ACL__Descriptor.NestedTypes[0];
        internal__static_MumbleProto_ACL_ChanGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ACL.Types.ChanGroup, global::Mumble.NET.ACL.Types.ChanGroup.Builder>(internal__static_MumbleProto_ACL_ChanGroup__Descriptor,
                new string[] { "Name", "Inherited", "Inherit", "Inheritable", "Add", "Remove", "InheritedMembers", });
        internal__static_MumbleProto_ACL_ChanACL__Descriptor = internal__static_MumbleProto_ACL__Descriptor.NestedTypes[1];
        internal__static_MumbleProto_ACL_ChanACL__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ACL.Types.ChanACL, global::Mumble.NET.ACL.Types.ChanACL.Builder>(internal__static_MumbleProto_ACL_ChanACL__Descriptor,
                new string[] { "ApplyHere", "ApplySubs", "Inherited", "UserId", "Group", "Grant", "Deny", });
        internal__static_MumbleProto_QueryUsers__Descriptor = Descriptor.MessageTypes[14];
        internal__static_MumbleProto_QueryUsers__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.QueryUsers, global::Mumble.NET.QueryUsers.Builder>(internal__static_MumbleProto_QueryUsers__Descriptor,
                new string[] { "Ids", "Names", });
        internal__static_MumbleProto_CryptSetup__Descriptor = Descriptor.MessageTypes[15];
        internal__static_MumbleProto_CryptSetup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.CryptSetup, global::Mumble.NET.CryptSetup.Builder>(internal__static_MumbleProto_CryptSetup__Descriptor,
                new string[] { "Key", "ClientNonce", "ServerNonce", });
        internal__static_MumbleProto_ContextActionModify__Descriptor = Descriptor.MessageTypes[16];
        internal__static_MumbleProto_ContextActionModify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ContextActionModify, global::Mumble.NET.ContextActionModify.Builder>(internal__static_MumbleProto_ContextActionModify__Descriptor,
                new string[] { "Action", "Text", "Context", "Operation", });
        internal__static_MumbleProto_ContextAction__Descriptor = Descriptor.MessageTypes[17];
        internal__static_MumbleProto_ContextAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ContextAction, global::Mumble.NET.ContextAction.Builder>(internal__static_MumbleProto_ContextAction__Descriptor,
                new string[] { "Session", "ChannelId", "Action", });
        internal__static_MumbleProto_UserList__Descriptor = Descriptor.MessageTypes[18];
        internal__static_MumbleProto_UserList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserList, global::Mumble.NET.UserList.Builder>(internal__static_MumbleProto_UserList__Descriptor,
                new string[] { "Users", });
        internal__static_MumbleProto_UserList_User__Descriptor = internal__static_MumbleProto_UserList__Descriptor.NestedTypes[0];
        internal__static_MumbleProto_UserList_User__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserList.Types.User, global::Mumble.NET.UserList.Types.User.Builder>(internal__static_MumbleProto_UserList_User__Descriptor,
                new string[] { "UserId", "Name", "LastSeen", "LastChannel", });
        internal__static_MumbleProto_VoiceTarget__Descriptor = Descriptor.MessageTypes[19];
        internal__static_MumbleProto_VoiceTarget__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.VoiceTarget, global::Mumble.NET.VoiceTarget.Builder>(internal__static_MumbleProto_VoiceTarget__Descriptor,
                new string[] { "Id", "Targets", });
        internal__static_MumbleProto_VoiceTarget_Target__Descriptor = internal__static_MumbleProto_VoiceTarget__Descriptor.NestedTypes[0];
        internal__static_MumbleProto_VoiceTarget_Target__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.VoiceTarget.Types.Target, global::Mumble.NET.VoiceTarget.Types.Target.Builder>(internal__static_MumbleProto_VoiceTarget_Target__Descriptor,
                new string[] { "Session", "ChannelId", "Group", "Links", "Children", });
        internal__static_MumbleProto_PermissionQuery__Descriptor = Descriptor.MessageTypes[20];
        internal__static_MumbleProto_PermissionQuery__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.PermissionQuery, global::Mumble.NET.PermissionQuery.Builder>(internal__static_MumbleProto_PermissionQuery__Descriptor,
                new string[] { "ChannelId", "Permissions", "Flush", });
        internal__static_MumbleProto_CodecVersion__Descriptor = Descriptor.MessageTypes[21];
        internal__static_MumbleProto_CodecVersion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.CodecVersion, global::Mumble.NET.CodecVersion.Builder>(internal__static_MumbleProto_CodecVersion__Descriptor,
                new string[] { "Alpha", "Beta", "PreferAlpha", "Opus", });
        internal__static_MumbleProto_UserStats__Descriptor = Descriptor.MessageTypes[22];
        internal__static_MumbleProto_UserStats__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserStats, global::Mumble.NET.UserStats.Builder>(internal__static_MumbleProto_UserStats__Descriptor,
                new string[] { "Session", "StatsOnly", "Certificates", "FromClient", "FromServer", "UdpPackets", "TcpPackets", "UdpPingAvg", "UdpPingVar", "TcpPingAvg", "TcpPingVar", "Version", "CeltVersions", "Address", "Bandwidth", "Onlinesecs", "Idlesecs", "StrongCertificate", "Opus", });
        internal__static_MumbleProto_UserStats_Stats__Descriptor = internal__static_MumbleProto_UserStats__Descriptor.NestedTypes[0];
        internal__static_MumbleProto_UserStats_Stats__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.UserStats.Types.Stats, global::Mumble.NET.UserStats.Types.Stats.Builder>(internal__static_MumbleProto_UserStats_Stats__Descriptor,
                new string[] { "Good", "Late", "Lost", "Resync", });
        internal__static_MumbleProto_RequestBlob__Descriptor = Descriptor.MessageTypes[23];
        internal__static_MumbleProto_RequestBlob__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.RequestBlob, global::Mumble.NET.RequestBlob.Builder>(internal__static_MumbleProto_RequestBlob__Descriptor,
                new string[] { "SessionTexture", "SessionComment", "ChannelDescription", });
        internal__static_MumbleProto_ServerConfig__Descriptor = Descriptor.MessageTypes[24];
        internal__static_MumbleProto_ServerConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.ServerConfig, global::Mumble.NET.ServerConfig.Builder>(internal__static_MumbleProto_ServerConfig__Descriptor,
                new string[] { "MaxBandwidth", "WelcomeText", "AllowHtml", "MessageLength", "ImageMessageLength", });
        internal__static_MumbleProto_SuggestConfig__Descriptor = Descriptor.MessageTypes[25];
        internal__static_MumbleProto_SuggestConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mumble.NET.SuggestConfig, global::Mumble.NET.SuggestConfig.Builder>(internal__static_MumbleProto_SuggestConfig__Descriptor,
                new string[] { "Version", "Positional", "PushToTalk", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class Version : pb::GeneratedMessage<Version, Version.Builder> {
    private Version() { }
    private static readonly Version defaultInstance = new Version().MakeReadOnly();
    private static readonly string[] _versionFieldNames = new string[] { "os", "os_version", "release", "version" };
    private static readonly uint[] _versionFieldTags = new uint[] { 26, 34, 18, 8 };
    public static Version DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Version DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Version ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Version__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Version, Version.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Version__FieldAccessorTable; }
    }
    
    public const int Version_FieldNumber = 1;
    private bool hasVersion_;
    private uint version_;
    public bool HasVersion_ {
      get { return hasVersion_; }
    }
    [global::System.CLSCompliant(false)]
    public uint Version_ {
      get { return version_; }
    }
    
    public const int ReleaseFieldNumber = 2;
    private bool hasRelease;
    private string release_ = "";
    public bool HasRelease {
      get { return hasRelease; }
    }
    public string Release {
      get { return release_; }
    }
    
    public const int OsFieldNumber = 3;
    private bool hasOs;
    private string os_ = "";
    public bool HasOs {
      get { return hasOs; }
    }
    public string Os {
      get { return os_; }
    }
    
    public const int OsVersionFieldNumber = 4;
    private bool hasOsVersion;
    private string osVersion_ = "";
    public bool HasOsVersion {
      get { return hasOsVersion; }
    }
    public string OsVersion {
      get { return osVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _versionFieldNames;
      if (hasVersion_) {
        output.WriteUInt32(1, field_names[3], Version_);
      }
      if (hasRelease) {
        output.WriteString(2, field_names[2], Release);
      }
      if (hasOs) {
        output.WriteString(3, field_names[0], Os);
      }
      if (hasOsVersion) {
        output.WriteString(4, field_names[1], OsVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersion_) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Version_);
      }
      if (hasRelease) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Release);
      }
      if (hasOs) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Os);
      }
      if (hasOsVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(4, OsVersion);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Version ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Version ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Version ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Version ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Version ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Version ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Version ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Version ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Version ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Version ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Version MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Version prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<Version, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Version cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Version result;
      
      private Version PrepareBuilder() {
        if (resultIsReadOnly) {
          Version original = result;
          result = new Version();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Version MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.Version.Descriptor; }
      }
      
      public override Version DefaultInstanceForType {
        get { return global::Mumble.NET.Version.DefaultInstance; }
      }
      
      public override Version BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Version) {
          return MergeFrom((Version) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Version other) {
        if (other == global::Mumble.NET.Version.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion_) {
          Version_ = other.Version_;
        }
        if (other.HasRelease) {
          Release = other.Release;
        }
        if (other.HasOs) {
          Os = other.Os;
        }
        if (other.HasOsVersion) {
          OsVersion = other.OsVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_versionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _versionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion_ = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              result.hasRelease = input.ReadString(ref result.release_);
              break;
            }
            case 26: {
              result.hasOs = input.ReadString(ref result.os_);
              break;
            }
            case 34: {
              result.hasOsVersion = input.ReadString(ref result.osVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion_ {
        get { return result.hasVersion_; }
      }
      [global::System.CLSCompliant(false)]
      public uint Version_ {
        get { return result.Version_; }
        set { SetVersion_(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVersion_(uint value) {
        PrepareBuilder();
        result.hasVersion_ = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion_() {
        PrepareBuilder();
        result.hasVersion_ = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasRelease {
        get { return result.hasRelease; }
      }
      public string Release {
        get { return result.Release; }
        set { SetRelease(value); }
      }
      public Builder SetRelease(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRelease = true;
        result.release_ = value;
        return this;
      }
      public Builder ClearRelease() {
        PrepareBuilder();
        result.hasRelease = false;
        result.release_ = "";
        return this;
      }
      
      public bool HasOs {
        get { return result.hasOs; }
      }
      public string Os {
        get { return result.Os; }
        set { SetOs(value); }
      }
      public Builder SetOs(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOs = true;
        result.os_ = value;
        return this;
      }
      public Builder ClearOs() {
        PrepareBuilder();
        result.hasOs = false;
        result.os_ = "";
        return this;
      }
      
      public bool HasOsVersion {
        get { return result.hasOsVersion; }
      }
      public string OsVersion {
        get { return result.OsVersion; }
        set { SetOsVersion(value); }
      }
      public Builder SetOsVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOsVersion = true;
        result.osVersion_ = value;
        return this;
      }
      public Builder ClearOsVersion() {
        PrepareBuilder();
        result.hasOsVersion = false;
        result.osVersion_ = "";
        return this;
      }
    }
    static Version() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class UDPTunnel : pb::GeneratedMessage<UDPTunnel, UDPTunnel.Builder> {
    private UDPTunnel() { }
    private static readonly UDPTunnel defaultInstance = new UDPTunnel().MakeReadOnly();
    private static readonly string[] _uDPTunnelFieldNames = new string[] { "packet" };
    private static readonly uint[] _uDPTunnelFieldTags = new uint[] { 10 };
    public static UDPTunnel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UDPTunnel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UDPTunnel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UDPTunnel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UDPTunnel, UDPTunnel.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UDPTunnel__FieldAccessorTable; }
    }
    
    public const int PacketFieldNumber = 1;
    private bool hasPacket;
    private pb::ByteString packet_ = pb::ByteString.Empty;
    public bool HasPacket {
      get { return hasPacket; }
    }
    public pb::ByteString Packet {
      get { return packet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPacket) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _uDPTunnelFieldNames;
      if (hasPacket) {
        output.WriteBytes(1, field_names[0], Packet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPacket) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Packet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UDPTunnel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UDPTunnel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UDPTunnel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UDPTunnel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UDPTunnel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UDPTunnel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UDPTunnel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UDPTunnel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UDPTunnel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UDPTunnel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UDPTunnel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UDPTunnel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<UDPTunnel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UDPTunnel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UDPTunnel result;
      
      private UDPTunnel PrepareBuilder() {
        if (resultIsReadOnly) {
          UDPTunnel original = result;
          result = new UDPTunnel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UDPTunnel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.UDPTunnel.Descriptor; }
      }
      
      public override UDPTunnel DefaultInstanceForType {
        get { return global::Mumble.NET.UDPTunnel.DefaultInstance; }
      }
      
      public override UDPTunnel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UDPTunnel) {
          return MergeFrom((UDPTunnel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UDPTunnel other) {
        if (other == global::Mumble.NET.UDPTunnel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPacket) {
          Packet = other.Packet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uDPTunnelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uDPTunnelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPacket = input.ReadBytes(ref result.packet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPacket {
        get { return result.hasPacket; }
      }
      public pb::ByteString Packet {
        get { return result.Packet; }
        set { SetPacket(value); }
      }
      public Builder SetPacket(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPacket = true;
        result.packet_ = value;
        return this;
      }
      public Builder ClearPacket() {
        PrepareBuilder();
        result.hasPacket = false;
        result.packet_ = pb::ByteString.Empty;
        return this;
      }
    }
    static UDPTunnel() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class Authenticate : pb::GeneratedMessage<Authenticate, Authenticate.Builder> {
    private Authenticate() { }
    private static readonly Authenticate defaultInstance = new Authenticate().MakeReadOnly();
    private static readonly string[] _authenticateFieldNames = new string[] { "celt_versions", "opus", "password", "tokens", "username" };
    private static readonly uint[] _authenticateFieldTags = new uint[] { 32, 40, 18, 26, 10 };
    public static Authenticate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Authenticate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Authenticate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Authenticate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Authenticate, Authenticate.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Authenticate__FieldAccessorTable; }
    }
    
    public const int UsernameFieldNumber = 1;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int TokensFieldNumber = 3;
    private pbc::PopsicleList<string> tokens_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TokensList {
      get { return pbc::Lists.AsReadOnly(tokens_); }
    }
    public int TokensCount {
      get { return tokens_.Count; }
    }
    public string GetTokens(int index) {
      return tokens_[index];
    }
    
    public const int CeltVersionsFieldNumber = 4;
    private pbc::PopsicleList<int> celtVersions_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CeltVersionsList {
      get { return pbc::Lists.AsReadOnly(celtVersions_); }
    }
    public int CeltVersionsCount {
      get { return celtVersions_.Count; }
    }
    public int GetCeltVersions(int index) {
      return celtVersions_[index];
    }
    
    public const int OpusFieldNumber = 5;
    private bool hasOpus;
    private bool opus_;
    public bool HasOpus {
      get { return hasOpus; }
    }
    public bool Opus {
      get { return opus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _authenticateFieldNames;
      if (hasUsername) {
        output.WriteString(1, field_names[4], Username);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[2], Password);
      }
      if (tokens_.Count > 0) {
        output.WriteStringArray(3, field_names[3], tokens_);
      }
      if (celtVersions_.Count > 0) {
        output.WriteInt32Array(4, field_names[0], celtVersions_);
      }
      if (hasOpus) {
        output.WriteBool(5, field_names[1], Opus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUsername) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Username);
      }
      if (hasPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Password);
      }
      {
        int dataSize = 0;
        foreach (string element in TokensList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * tokens_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in CeltVersionsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * celtVersions_.Count;
      }
      if (hasOpus) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Opus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Authenticate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Authenticate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Authenticate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Authenticate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Authenticate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Authenticate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Authenticate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Authenticate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Authenticate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Authenticate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Authenticate MakeReadOnly() {
      tokens_.MakeReadOnly();
      celtVersions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Authenticate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<Authenticate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Authenticate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Authenticate result;
      
      private Authenticate PrepareBuilder() {
        if (resultIsReadOnly) {
          Authenticate original = result;
          result = new Authenticate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Authenticate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.Authenticate.Descriptor; }
      }
      
      public override Authenticate DefaultInstanceForType {
        get { return global::Mumble.NET.Authenticate.DefaultInstance; }
      }
      
      public override Authenticate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Authenticate) {
          return MergeFrom((Authenticate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Authenticate other) {
        if (other == global::Mumble.NET.Authenticate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.tokens_.Count != 0) {
          result.tokens_.Add(other.tokens_);
        }
        if (other.celtVersions_.Count != 0) {
          result.celtVersions_.Add(other.celtVersions_);
        }
        if (other.HasOpus) {
          Opus = other.Opus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authenticateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authenticateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.tokens_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.celtVersions_);
              break;
            }
            case 40: {
              result.hasOpus = input.ReadBool(ref result.opus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> TokensList {
        get { return PrepareBuilder().tokens_; }
      }
      public int TokensCount {
        get { return result.TokensCount; }
      }
      public string GetTokens(int index) {
        return result.GetTokens(index);
      }
      public Builder SetTokens(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tokens_[index] = value;
        return this;
      }
      public Builder AddTokens(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tokens_.Add(value);
        return this;
      }
      public Builder AddRangeTokens(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tokens_.Add(values);
        return this;
      }
      public Builder ClearTokens() {
        PrepareBuilder();
        result.tokens_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> CeltVersionsList {
        get { return PrepareBuilder().celtVersions_; }
      }
      public int CeltVersionsCount {
        get { return result.CeltVersionsCount; }
      }
      public int GetCeltVersions(int index) {
        return result.GetCeltVersions(index);
      }
      public Builder SetCeltVersions(int index, int value) {
        PrepareBuilder();
        result.celtVersions_[index] = value;
        return this;
      }
      public Builder AddCeltVersions(int value) {
        PrepareBuilder();
        result.celtVersions_.Add(value);
        return this;
      }
      public Builder AddRangeCeltVersions(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.celtVersions_.Add(values);
        return this;
      }
      public Builder ClearCeltVersions() {
        PrepareBuilder();
        result.celtVersions_.Clear();
        return this;
      }
      
      public bool HasOpus {
        get { return result.hasOpus; }
      }
      public bool Opus {
        get { return result.Opus; }
        set { SetOpus(value); }
      }
      public Builder SetOpus(bool value) {
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = value;
        return this;
      }
      public Builder ClearOpus() {
        PrepareBuilder();
        result.hasOpus = false;
        result.opus_ = false;
        return this;
      }
    }
    static Authenticate() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class Ping : pb::GeneratedMessage<Ping, Ping.Builder> {
    private Ping() { }
    private static readonly Ping defaultInstance = new Ping().MakeReadOnly();
    private static readonly string[] _pingFieldNames = new string[] { "good", "late", "lost", "resync", "tcp_packets", "tcp_ping_avg", "tcp_ping_var", "timestamp", "udp_packets", "udp_ping_avg", "udp_ping_var" };
    private static readonly uint[] _pingFieldTags = new uint[] { 16, 24, 32, 40, 56, 85, 93, 8, 48, 69, 77 };
    public static Ping DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Ping DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Ping ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Ping__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Ping, Ping.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Ping__FieldAccessorTable; }
    }
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private ulong timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Timestamp {
      get { return timestamp_; }
    }
    
    public const int GoodFieldNumber = 2;
    private bool hasGood;
    private uint good_;
    public bool HasGood {
      get { return hasGood; }
    }
    [global::System.CLSCompliant(false)]
    public uint Good {
      get { return good_; }
    }
    
    public const int LateFieldNumber = 3;
    private bool hasLate;
    private uint late_;
    public bool HasLate {
      get { return hasLate; }
    }
    [global::System.CLSCompliant(false)]
    public uint Late {
      get { return late_; }
    }
    
    public const int LostFieldNumber = 4;
    private bool hasLost;
    private uint lost_;
    public bool HasLost {
      get { return hasLost; }
    }
    [global::System.CLSCompliant(false)]
    public uint Lost {
      get { return lost_; }
    }
    
    public const int ResyncFieldNumber = 5;
    private bool hasResync;
    private uint resync_;
    public bool HasResync {
      get { return hasResync; }
    }
    [global::System.CLSCompliant(false)]
    public uint Resync {
      get { return resync_; }
    }
    
    public const int UdpPacketsFieldNumber = 6;
    private bool hasUdpPackets;
    private uint udpPackets_;
    public bool HasUdpPackets {
      get { return hasUdpPackets; }
    }
    [global::System.CLSCompliant(false)]
    public uint UdpPackets {
      get { return udpPackets_; }
    }
    
    public const int TcpPacketsFieldNumber = 7;
    private bool hasTcpPackets;
    private uint tcpPackets_;
    public bool HasTcpPackets {
      get { return hasTcpPackets; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpPackets {
      get { return tcpPackets_; }
    }
    
    public const int UdpPingAvgFieldNumber = 8;
    private bool hasUdpPingAvg;
    private float udpPingAvg_;
    public bool HasUdpPingAvg {
      get { return hasUdpPingAvg; }
    }
    public float UdpPingAvg {
      get { return udpPingAvg_; }
    }
    
    public const int UdpPingVarFieldNumber = 9;
    private bool hasUdpPingVar;
    private float udpPingVar_;
    public bool HasUdpPingVar {
      get { return hasUdpPingVar; }
    }
    public float UdpPingVar {
      get { return udpPingVar_; }
    }
    
    public const int TcpPingAvgFieldNumber = 10;
    private bool hasTcpPingAvg;
    private float tcpPingAvg_;
    public bool HasTcpPingAvg {
      get { return hasTcpPingAvg; }
    }
    public float TcpPingAvg {
      get { return tcpPingAvg_; }
    }
    
    public const int TcpPingVarFieldNumber = 11;
    private bool hasTcpPingVar;
    private float tcpPingVar_;
    public bool HasTcpPingVar {
      get { return hasTcpPingVar; }
    }
    public float TcpPingVar {
      get { return tcpPingVar_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _pingFieldNames;
      if (hasTimestamp) {
        output.WriteUInt64(1, field_names[7], Timestamp);
      }
      if (hasGood) {
        output.WriteUInt32(2, field_names[0], Good);
      }
      if (hasLate) {
        output.WriteUInt32(3, field_names[1], Late);
      }
      if (hasLost) {
        output.WriteUInt32(4, field_names[2], Lost);
      }
      if (hasResync) {
        output.WriteUInt32(5, field_names[3], Resync);
      }
      if (hasUdpPackets) {
        output.WriteUInt32(6, field_names[8], UdpPackets);
      }
      if (hasTcpPackets) {
        output.WriteUInt32(7, field_names[4], TcpPackets);
      }
      if (hasUdpPingAvg) {
        output.WriteFloat(8, field_names[9], UdpPingAvg);
      }
      if (hasUdpPingVar) {
        output.WriteFloat(9, field_names[10], UdpPingVar);
      }
      if (hasTcpPingAvg) {
        output.WriteFloat(10, field_names[5], TcpPingAvg);
      }
      if (hasTcpPingVar) {
        output.WriteFloat(11, field_names[6], TcpPingVar);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Timestamp);
      }
      if (hasGood) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Good);
      }
      if (hasLate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Late);
      }
      if (hasLost) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Lost);
      }
      if (hasResync) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Resync);
      }
      if (hasUdpPackets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, UdpPackets);
      }
      if (hasTcpPackets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, TcpPackets);
      }
      if (hasUdpPingAvg) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, UdpPingAvg);
      }
      if (hasUdpPingVar) {
        size += pb::CodedOutputStream.ComputeFloatSize(9, UdpPingVar);
      }
      if (hasTcpPingAvg) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, TcpPingAvg);
      }
      if (hasTcpPingVar) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, TcpPingVar);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Ping ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ping ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ping ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ping ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Ping ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Ping ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ping ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Ping MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Ping prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<Ping, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Ping cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Ping result;
      
      private Ping PrepareBuilder() {
        if (resultIsReadOnly) {
          Ping original = result;
          result = new Ping();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Ping MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.Ping.Descriptor; }
      }
      
      public override Ping DefaultInstanceForType {
        get { return global::Mumble.NET.Ping.DefaultInstance; }
      }
      
      public override Ping BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Ping) {
          return MergeFrom((Ping) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Ping other) {
        if (other == global::Mumble.NET.Ping.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasGood) {
          Good = other.Good;
        }
        if (other.HasLate) {
          Late = other.Late;
        }
        if (other.HasLost) {
          Lost = other.Lost;
        }
        if (other.HasResync) {
          Resync = other.Resync;
        }
        if (other.HasUdpPackets) {
          UdpPackets = other.UdpPackets;
        }
        if (other.HasTcpPackets) {
          TcpPackets = other.TcpPackets;
        }
        if (other.HasUdpPingAvg) {
          UdpPingAvg = other.UdpPingAvg;
        }
        if (other.HasUdpPingVar) {
          UdpPingVar = other.UdpPingVar;
        }
        if (other.HasTcpPingAvg) {
          TcpPingAvg = other.TcpPingAvg;
        }
        if (other.HasTcpPingVar) {
          TcpPingVar = other.TcpPingVar;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadUInt64(ref result.timestamp_);
              break;
            }
            case 16: {
              result.hasGood = input.ReadUInt32(ref result.good_);
              break;
            }
            case 24: {
              result.hasLate = input.ReadUInt32(ref result.late_);
              break;
            }
            case 32: {
              result.hasLost = input.ReadUInt32(ref result.lost_);
              break;
            }
            case 40: {
              result.hasResync = input.ReadUInt32(ref result.resync_);
              break;
            }
            case 48: {
              result.hasUdpPackets = input.ReadUInt32(ref result.udpPackets_);
              break;
            }
            case 56: {
              result.hasTcpPackets = input.ReadUInt32(ref result.tcpPackets_);
              break;
            }
            case 69: {
              result.hasUdpPingAvg = input.ReadFloat(ref result.udpPingAvg_);
              break;
            }
            case 77: {
              result.hasUdpPingVar = input.ReadFloat(ref result.udpPingVar_);
              break;
            }
            case 85: {
              result.hasTcpPingAvg = input.ReadFloat(ref result.tcpPingAvg_);
              break;
            }
            case 93: {
              result.hasTcpPingVar = input.ReadFloat(ref result.tcpPingVar_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(ulong value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0UL;
        return this;
      }
      
      public bool HasGood {
        get { return result.hasGood; }
      }
      [global::System.CLSCompliant(false)]
      public uint Good {
        get { return result.Good; }
        set { SetGood(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGood(uint value) {
        PrepareBuilder();
        result.hasGood = true;
        result.good_ = value;
        return this;
      }
      public Builder ClearGood() {
        PrepareBuilder();
        result.hasGood = false;
        result.good_ = 0;
        return this;
      }
      
      public bool HasLate {
        get { return result.hasLate; }
      }
      [global::System.CLSCompliant(false)]
      public uint Late {
        get { return result.Late; }
        set { SetLate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLate(uint value) {
        PrepareBuilder();
        result.hasLate = true;
        result.late_ = value;
        return this;
      }
      public Builder ClearLate() {
        PrepareBuilder();
        result.hasLate = false;
        result.late_ = 0;
        return this;
      }
      
      public bool HasLost {
        get { return result.hasLost; }
      }
      [global::System.CLSCompliant(false)]
      public uint Lost {
        get { return result.Lost; }
        set { SetLost(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLost(uint value) {
        PrepareBuilder();
        result.hasLost = true;
        result.lost_ = value;
        return this;
      }
      public Builder ClearLost() {
        PrepareBuilder();
        result.hasLost = false;
        result.lost_ = 0;
        return this;
      }
      
      public bool HasResync {
        get { return result.hasResync; }
      }
      [global::System.CLSCompliant(false)]
      public uint Resync {
        get { return result.Resync; }
        set { SetResync(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResync(uint value) {
        PrepareBuilder();
        result.hasResync = true;
        result.resync_ = value;
        return this;
      }
      public Builder ClearResync() {
        PrepareBuilder();
        result.hasResync = false;
        result.resync_ = 0;
        return this;
      }
      
      public bool HasUdpPackets {
        get { return result.hasUdpPackets; }
      }
      [global::System.CLSCompliant(false)]
      public uint UdpPackets {
        get { return result.UdpPackets; }
        set { SetUdpPackets(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUdpPackets(uint value) {
        PrepareBuilder();
        result.hasUdpPackets = true;
        result.udpPackets_ = value;
        return this;
      }
      public Builder ClearUdpPackets() {
        PrepareBuilder();
        result.hasUdpPackets = false;
        result.udpPackets_ = 0;
        return this;
      }
      
      public bool HasTcpPackets {
        get { return result.hasTcpPackets; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpPackets {
        get { return result.TcpPackets; }
        set { SetTcpPackets(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpPackets(uint value) {
        PrepareBuilder();
        result.hasTcpPackets = true;
        result.tcpPackets_ = value;
        return this;
      }
      public Builder ClearTcpPackets() {
        PrepareBuilder();
        result.hasTcpPackets = false;
        result.tcpPackets_ = 0;
        return this;
      }
      
      public bool HasUdpPingAvg {
        get { return result.hasUdpPingAvg; }
      }
      public float UdpPingAvg {
        get { return result.UdpPingAvg; }
        set { SetUdpPingAvg(value); }
      }
      public Builder SetUdpPingAvg(float value) {
        PrepareBuilder();
        result.hasUdpPingAvg = true;
        result.udpPingAvg_ = value;
        return this;
      }
      public Builder ClearUdpPingAvg() {
        PrepareBuilder();
        result.hasUdpPingAvg = false;
        result.udpPingAvg_ = 0F;
        return this;
      }
      
      public bool HasUdpPingVar {
        get { return result.hasUdpPingVar; }
      }
      public float UdpPingVar {
        get { return result.UdpPingVar; }
        set { SetUdpPingVar(value); }
      }
      public Builder SetUdpPingVar(float value) {
        PrepareBuilder();
        result.hasUdpPingVar = true;
        result.udpPingVar_ = value;
        return this;
      }
      public Builder ClearUdpPingVar() {
        PrepareBuilder();
        result.hasUdpPingVar = false;
        result.udpPingVar_ = 0F;
        return this;
      }
      
      public bool HasTcpPingAvg {
        get { return result.hasTcpPingAvg; }
      }
      public float TcpPingAvg {
        get { return result.TcpPingAvg; }
        set { SetTcpPingAvg(value); }
      }
      public Builder SetTcpPingAvg(float value) {
        PrepareBuilder();
        result.hasTcpPingAvg = true;
        result.tcpPingAvg_ = value;
        return this;
      }
      public Builder ClearTcpPingAvg() {
        PrepareBuilder();
        result.hasTcpPingAvg = false;
        result.tcpPingAvg_ = 0F;
        return this;
      }
      
      public bool HasTcpPingVar {
        get { return result.hasTcpPingVar; }
      }
      public float TcpPingVar {
        get { return result.TcpPingVar; }
        set { SetTcpPingVar(value); }
      }
      public Builder SetTcpPingVar(float value) {
        PrepareBuilder();
        result.hasTcpPingVar = true;
        result.tcpPingVar_ = value;
        return this;
      }
      public Builder ClearTcpPingVar() {
        PrepareBuilder();
        result.hasTcpPingVar = false;
        result.tcpPingVar_ = 0F;
        return this;
      }
    }
    static Ping() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class Reject : pb::GeneratedMessage<Reject, Reject.Builder> {
    private Reject() { }
    private static readonly Reject defaultInstance = new Reject().MakeReadOnly();
    private static readonly string[] _rejectFieldNames = new string[] { "reason", "type" };
    private static readonly uint[] _rejectFieldTags = new uint[] { 18, 8 };
    public static Reject DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Reject DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Reject ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Reject__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Reject, Reject.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_Reject__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public enum RejectType {
        None = 0,
        WrongVersion = 1,
        InvalidUsername = 2,
        WrongUserPW = 3,
        WrongServerPW = 4,
        UsernameInUse = 5,
        ServerFull = 6,
        NoCertificate = 7,
        AuthenticatorFail = 8,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Mumble.NET.Reject.Types.RejectType type_ = global::Mumble.NET.Reject.Types.RejectType.None;
    public bool HasType {
      get { return hasType; }
    }
    public global::Mumble.NET.Reject.Types.RejectType Type {
      get { return type_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rejectFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[1], (int) Type, Type);
      }
      if (hasReason) {
        output.WriteString(2, field_names[0], Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Reject ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Reject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Reject ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Reject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Reject ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Reject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Reject ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Reject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Reject ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Reject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Reject MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Reject prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<Reject, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Reject cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Reject result;
      
      private Reject PrepareBuilder() {
        if (resultIsReadOnly) {
          Reject original = result;
          result = new Reject();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Reject MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.Reject.Descriptor; }
      }
      
      public override Reject DefaultInstanceForType {
        get { return global::Mumble.NET.Reject.DefaultInstance; }
      }
      
      public override Reject BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Reject) {
          return MergeFrom((Reject) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Reject other) {
        if (other == global::Mumble.NET.Reject.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rejectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rejectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Mumble.NET.Reject.Types.RejectType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Mumble.NET.Reject.Types.RejectType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Mumble.NET.Reject.Types.RejectType.None;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static Reject() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ServerSync : pb::GeneratedMessage<ServerSync, ServerSync.Builder> {
    private ServerSync() { }
    private static readonly ServerSync defaultInstance = new ServerSync().MakeReadOnly();
    private static readonly string[] _serverSyncFieldNames = new string[] { "max_bandwidth", "permissions", "session", "welcome_text" };
    private static readonly uint[] _serverSyncFieldTags = new uint[] { 16, 32, 8, 26 };
    public static ServerSync DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerSync DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerSync ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ServerSync__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerSync, ServerSync.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ServerSync__FieldAccessorTable; }
    }
    
    public const int SessionFieldNumber = 1;
    private bool hasSession;
    private uint session_;
    public bool HasSession {
      get { return hasSession; }
    }
    [global::System.CLSCompliant(false)]
    public uint Session {
      get { return session_; }
    }
    
    public const int MaxBandwidthFieldNumber = 2;
    private bool hasMaxBandwidth;
    private uint maxBandwidth_;
    public bool HasMaxBandwidth {
      get { return hasMaxBandwidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxBandwidth {
      get { return maxBandwidth_; }
    }
    
    public const int WelcomeTextFieldNumber = 3;
    private bool hasWelcomeText;
    private string welcomeText_ = "";
    public bool HasWelcomeText {
      get { return hasWelcomeText; }
    }
    public string WelcomeText {
      get { return welcomeText_; }
    }
    
    public const int PermissionsFieldNumber = 4;
    private bool hasPermissions;
    private ulong permissions_;
    public bool HasPermissions {
      get { return hasPermissions; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Permissions {
      get { return permissions_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serverSyncFieldNames;
      if (hasSession) {
        output.WriteUInt32(1, field_names[2], Session);
      }
      if (hasMaxBandwidth) {
        output.WriteUInt32(2, field_names[0], MaxBandwidth);
      }
      if (hasWelcomeText) {
        output.WriteString(3, field_names[3], WelcomeText);
      }
      if (hasPermissions) {
        output.WriteUInt64(4, field_names[1], Permissions);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Session);
      }
      if (hasMaxBandwidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MaxBandwidth);
      }
      if (hasWelcomeText) {
        size += pb::CodedOutputStream.ComputeStringSize(3, WelcomeText);
      }
      if (hasPermissions) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Permissions);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ServerSync ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSync ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSync ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSync ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSync ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSync ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerSync ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerSync ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerSync ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSync ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerSync MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerSync prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerSync, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerSync cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerSync result;
      
      private ServerSync PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerSync original = result;
          result = new ServerSync();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerSync MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ServerSync.Descriptor; }
      }
      
      public override ServerSync DefaultInstanceForType {
        get { return global::Mumble.NET.ServerSync.DefaultInstance; }
      }
      
      public override ServerSync BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerSync) {
          return MergeFrom((ServerSync) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerSync other) {
        if (other == global::Mumble.NET.ServerSync.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSession) {
          Session = other.Session;
        }
        if (other.HasMaxBandwidth) {
          MaxBandwidth = other.MaxBandwidth;
        }
        if (other.HasWelcomeText) {
          WelcomeText = other.WelcomeText;
        }
        if (other.HasPermissions) {
          Permissions = other.Permissions;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverSyncFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverSyncFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSession = input.ReadUInt32(ref result.session_);
              break;
            }
            case 16: {
              result.hasMaxBandwidth = input.ReadUInt32(ref result.maxBandwidth_);
              break;
            }
            case 26: {
              result.hasWelcomeText = input.ReadString(ref result.welcomeText_);
              break;
            }
            case 32: {
              result.hasPermissions = input.ReadUInt64(ref result.permissions_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSession {
        get { return result.hasSession; }
      }
      [global::System.CLSCompliant(false)]
      public uint Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(uint value) {
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = 0;
        return this;
      }
      
      public bool HasMaxBandwidth {
        get { return result.hasMaxBandwidth; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxBandwidth {
        get { return result.MaxBandwidth; }
        set { SetMaxBandwidth(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxBandwidth(uint value) {
        PrepareBuilder();
        result.hasMaxBandwidth = true;
        result.maxBandwidth_ = value;
        return this;
      }
      public Builder ClearMaxBandwidth() {
        PrepareBuilder();
        result.hasMaxBandwidth = false;
        result.maxBandwidth_ = 0;
        return this;
      }
      
      public bool HasWelcomeText {
        get { return result.hasWelcomeText; }
      }
      public string WelcomeText {
        get { return result.WelcomeText; }
        set { SetWelcomeText(value); }
      }
      public Builder SetWelcomeText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWelcomeText = true;
        result.welcomeText_ = value;
        return this;
      }
      public Builder ClearWelcomeText() {
        PrepareBuilder();
        result.hasWelcomeText = false;
        result.welcomeText_ = "";
        return this;
      }
      
      public bool HasPermissions {
        get { return result.hasPermissions; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Permissions {
        get { return result.Permissions; }
        set { SetPermissions(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPermissions(ulong value) {
        PrepareBuilder();
        result.hasPermissions = true;
        result.permissions_ = value;
        return this;
      }
      public Builder ClearPermissions() {
        PrepareBuilder();
        result.hasPermissions = false;
        result.permissions_ = 0UL;
        return this;
      }
    }
    static ServerSync() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ChannelRemove : pb::GeneratedMessage<ChannelRemove, ChannelRemove.Builder> {
    private ChannelRemove() { }
    private static readonly ChannelRemove defaultInstance = new ChannelRemove().MakeReadOnly();
    private static readonly string[] _channelRemoveFieldNames = new string[] { "channel_id" };
    private static readonly uint[] _channelRemoveFieldTags = new uint[] { 8 };
    public static ChannelRemove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelRemove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelRemove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ChannelRemove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelRemove, ChannelRemove.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ChannelRemove__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _channelRemoveFieldNames;
      if (hasChannelId) {
        output.WriteUInt32(1, field_names[0], ChannelId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ChannelId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ChannelRemove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelRemove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelRemove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelRemove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelRemove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelRemove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelRemove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelRemove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelRemove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelRemove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelRemove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelRemove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChannelRemove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelRemove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelRemove result;
      
      private ChannelRemove PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelRemove original = result;
          result = new ChannelRemove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelRemove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ChannelRemove.Descriptor; }
      }
      
      public override ChannelRemove DefaultInstanceForType {
        get { return global::Mumble.NET.ChannelRemove.DefaultInstance; }
      }
      
      public override ChannelRemove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelRemove) {
          return MergeFrom((ChannelRemove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelRemove other) {
        if (other == global::Mumble.NET.ChannelRemove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_channelRemoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _channelRemoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
    }
    static ChannelRemove() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ChannelState : pb::GeneratedMessage<ChannelState, ChannelState.Builder> {
    private ChannelState() { }
    private static readonly ChannelState defaultInstance = new ChannelState().MakeReadOnly();
    private static readonly string[] _channelStateFieldNames = new string[] { "channel_id", "description", "description_hash", "links", "links_add", "links_remove", "name", "parent", "position", "temporary" };
    private static readonly uint[] _channelStateFieldTags = new uint[] { 8, 42, 82, 32, 48, 56, 26, 16, 72, 64 };
    public static ChannelState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ChannelState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelState, ChannelState.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ChannelState__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public const int ParentFieldNumber = 2;
    private bool hasParent;
    private uint parent_;
    public bool HasParent {
      get { return hasParent; }
    }
    [global::System.CLSCompliant(false)]
    public uint Parent {
      get { return parent_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int LinksFieldNumber = 4;
    private pbc::PopsicleList<uint> links_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> LinksList {
      get { return pbc::Lists.AsReadOnly(links_); }
    }
    public int LinksCount {
      get { return links_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetLinks(int index) {
      return links_[index];
    }
    
    public const int DescriptionFieldNumber = 5;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int LinksAddFieldNumber = 6;
    private pbc::PopsicleList<uint> linksAdd_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> LinksAddList {
      get { return pbc::Lists.AsReadOnly(linksAdd_); }
    }
    public int LinksAddCount {
      get { return linksAdd_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetLinksAdd(int index) {
      return linksAdd_[index];
    }
    
    public const int LinksRemoveFieldNumber = 7;
    private pbc::PopsicleList<uint> linksRemove_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> LinksRemoveList {
      get { return pbc::Lists.AsReadOnly(linksRemove_); }
    }
    public int LinksRemoveCount {
      get { return linksRemove_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetLinksRemove(int index) {
      return linksRemove_[index];
    }
    
    public const int TemporaryFieldNumber = 8;
    private bool hasTemporary;
    private bool temporary_;
    public bool HasTemporary {
      get { return hasTemporary; }
    }
    public bool Temporary {
      get { return temporary_; }
    }
    
    public const int PositionFieldNumber = 9;
    private bool hasPosition;
    private int position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public int Position {
      get { return position_; }
    }
    
    public const int DescriptionHashFieldNumber = 10;
    private bool hasDescriptionHash;
    private pb::ByteString descriptionHash_ = pb::ByteString.Empty;
    public bool HasDescriptionHash {
      get { return hasDescriptionHash; }
    }
    public pb::ByteString DescriptionHash {
      get { return descriptionHash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _channelStateFieldNames;
      if (hasChannelId) {
        output.WriteUInt32(1, field_names[0], ChannelId);
      }
      if (hasParent) {
        output.WriteUInt32(2, field_names[7], Parent);
      }
      if (hasName) {
        output.WriteString(3, field_names[6], Name);
      }
      if (links_.Count > 0) {
        output.WriteUInt32Array(4, field_names[3], links_);
      }
      if (hasDescription) {
        output.WriteString(5, field_names[1], Description);
      }
      if (linksAdd_.Count > 0) {
        output.WriteUInt32Array(6, field_names[4], linksAdd_);
      }
      if (linksRemove_.Count > 0) {
        output.WriteUInt32Array(7, field_names[5], linksRemove_);
      }
      if (hasTemporary) {
        output.WriteBool(8, field_names[9], Temporary);
      }
      if (hasPosition) {
        output.WriteInt32(9, field_names[8], Position);
      }
      if (hasDescriptionHash) {
        output.WriteBytes(10, field_names[2], DescriptionHash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ChannelId);
      }
      if (hasParent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Parent);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      {
        int dataSize = 0;
        foreach (uint element in LinksList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * links_.Count;
      }
      if (hasDescription) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Description);
      }
      {
        int dataSize = 0;
        foreach (uint element in LinksAddList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * linksAdd_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in LinksRemoveList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * linksRemove_.Count;
      }
      if (hasTemporary) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Temporary);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Position);
      }
      if (hasDescriptionHash) {
        size += pb::CodedOutputStream.ComputeBytesSize(10, DescriptionHash);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ChannelState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelState MakeReadOnly() {
      links_.MakeReadOnly();
      linksAdd_.MakeReadOnly();
      linksRemove_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChannelState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelState result;
      
      private ChannelState PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelState original = result;
          result = new ChannelState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ChannelState.Descriptor; }
      }
      
      public override ChannelState DefaultInstanceForType {
        get { return global::Mumble.NET.ChannelState.DefaultInstance; }
      }
      
      public override ChannelState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelState) {
          return MergeFrom((ChannelState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelState other) {
        if (other == global::Mumble.NET.ChannelState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        if (other.HasParent) {
          Parent = other.Parent;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.links_.Count != 0) {
          result.links_.Add(other.links_);
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.linksAdd_.Count != 0) {
          result.linksAdd_.Add(other.linksAdd_);
        }
        if (other.linksRemove_.Count != 0) {
          result.linksRemove_.Add(other.linksRemove_);
        }
        if (other.HasTemporary) {
          Temporary = other.Temporary;
        }
        if (other.HasPosition) {
          Position = other.Position;
        }
        if (other.HasDescriptionHash) {
          DescriptionHash = other.DescriptionHash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_channelStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _channelStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
            case 16: {
              result.hasParent = input.ReadUInt32(ref result.parent_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt32Array(tag, field_name, result.links_);
              break;
            }
            case 42: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 50:
            case 48: {
              input.ReadUInt32Array(tag, field_name, result.linksAdd_);
              break;
            }
            case 58:
            case 56: {
              input.ReadUInt32Array(tag, field_name, result.linksRemove_);
              break;
            }
            case 64: {
              result.hasTemporary = input.ReadBool(ref result.temporary_);
              break;
            }
            case 72: {
              result.hasPosition = input.ReadInt32(ref result.position_);
              break;
            }
            case 82: {
              result.hasDescriptionHash = input.ReadBytes(ref result.descriptionHash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
      
      public bool HasParent {
        get { return result.hasParent; }
      }
      [global::System.CLSCompliant(false)]
      public uint Parent {
        get { return result.Parent; }
        set { SetParent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetParent(uint value) {
        PrepareBuilder();
        result.hasParent = true;
        result.parent_ = value;
        return this;
      }
      public Builder ClearParent() {
        PrepareBuilder();
        result.hasParent = false;
        result.parent_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> LinksList {
        get { return PrepareBuilder().links_; }
      }
      public int LinksCount {
        get { return result.LinksCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetLinks(int index) {
        return result.GetLinks(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLinks(int index, uint value) {
        PrepareBuilder();
        result.links_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddLinks(uint value) {
        PrepareBuilder();
        result.links_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeLinks(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.links_.Add(values);
        return this;
      }
      public Builder ClearLinks() {
        PrepareBuilder();
        result.links_.Clear();
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> LinksAddList {
        get { return PrepareBuilder().linksAdd_; }
      }
      public int LinksAddCount {
        get { return result.LinksAddCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetLinksAdd(int index) {
        return result.GetLinksAdd(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLinksAdd(int index, uint value) {
        PrepareBuilder();
        result.linksAdd_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddLinksAdd(uint value) {
        PrepareBuilder();
        result.linksAdd_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeLinksAdd(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.linksAdd_.Add(values);
        return this;
      }
      public Builder ClearLinksAdd() {
        PrepareBuilder();
        result.linksAdd_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> LinksRemoveList {
        get { return PrepareBuilder().linksRemove_; }
      }
      public int LinksRemoveCount {
        get { return result.LinksRemoveCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetLinksRemove(int index) {
        return result.GetLinksRemove(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLinksRemove(int index, uint value) {
        PrepareBuilder();
        result.linksRemove_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddLinksRemove(uint value) {
        PrepareBuilder();
        result.linksRemove_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeLinksRemove(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.linksRemove_.Add(values);
        return this;
      }
      public Builder ClearLinksRemove() {
        PrepareBuilder();
        result.linksRemove_.Clear();
        return this;
      }
      
      public bool HasTemporary {
        get { return result.hasTemporary; }
      }
      public bool Temporary {
        get { return result.Temporary; }
        set { SetTemporary(value); }
      }
      public Builder SetTemporary(bool value) {
        PrepareBuilder();
        result.hasTemporary = true;
        result.temporary_ = value;
        return this;
      }
      public Builder ClearTemporary() {
        PrepareBuilder();
        result.hasTemporary = false;
        result.temporary_ = false;
        return this;
      }
      
      public bool HasPosition {
        get { return result.hasPosition; }
      }
      public int Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(int value) {
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = 0;
        return this;
      }
      
      public bool HasDescriptionHash {
        get { return result.hasDescriptionHash; }
      }
      public pb::ByteString DescriptionHash {
        get { return result.DescriptionHash; }
        set { SetDescriptionHash(value); }
      }
      public Builder SetDescriptionHash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescriptionHash = true;
        result.descriptionHash_ = value;
        return this;
      }
      public Builder ClearDescriptionHash() {
        PrepareBuilder();
        result.hasDescriptionHash = false;
        result.descriptionHash_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ChannelState() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class UserRemove : pb::GeneratedMessage<UserRemove, UserRemove.Builder> {
    private UserRemove() { }
    private static readonly UserRemove defaultInstance = new UserRemove().MakeReadOnly();
    private static readonly string[] _userRemoveFieldNames = new string[] { "actor", "ban", "reason", "session" };
    private static readonly uint[] _userRemoveFieldTags = new uint[] { 16, 32, 26, 8 };
    public static UserRemove DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserRemove DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserRemove ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserRemove__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserRemove, UserRemove.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserRemove__FieldAccessorTable; }
    }
    
    public const int SessionFieldNumber = 1;
    private bool hasSession;
    private uint session_;
    public bool HasSession {
      get { return hasSession; }
    }
    [global::System.CLSCompliant(false)]
    public uint Session {
      get { return session_; }
    }
    
    public const int ActorFieldNumber = 2;
    private bool hasActor;
    private uint actor_;
    public bool HasActor {
      get { return hasActor; }
    }
    [global::System.CLSCompliant(false)]
    public uint Actor {
      get { return actor_; }
    }
    
    public const int ReasonFieldNumber = 3;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public const int BanFieldNumber = 4;
    private bool hasBan;
    private bool ban_;
    public bool HasBan {
      get { return hasBan; }
    }
    public bool Ban {
      get { return ban_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSession) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userRemoveFieldNames;
      if (hasSession) {
        output.WriteUInt32(1, field_names[3], Session);
      }
      if (hasActor) {
        output.WriteUInt32(2, field_names[0], Actor);
      }
      if (hasReason) {
        output.WriteString(3, field_names[2], Reason);
      }
      if (hasBan) {
        output.WriteBool(4, field_names[1], Ban);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Session);
      }
      if (hasActor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Actor);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Reason);
      }
      if (hasBan) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Ban);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserRemove ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserRemove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserRemove ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserRemove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserRemove ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserRemove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserRemove ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserRemove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserRemove ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserRemove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserRemove MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserRemove prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<UserRemove, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserRemove cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserRemove result;
      
      private UserRemove PrepareBuilder() {
        if (resultIsReadOnly) {
          UserRemove original = result;
          result = new UserRemove();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserRemove MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.UserRemove.Descriptor; }
      }
      
      public override UserRemove DefaultInstanceForType {
        get { return global::Mumble.NET.UserRemove.DefaultInstance; }
      }
      
      public override UserRemove BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserRemove) {
          return MergeFrom((UserRemove) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserRemove other) {
        if (other == global::Mumble.NET.UserRemove.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSession) {
          Session = other.Session;
        }
        if (other.HasActor) {
          Actor = other.Actor;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasBan) {
          Ban = other.Ban;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userRemoveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userRemoveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSession = input.ReadUInt32(ref result.session_);
              break;
            }
            case 16: {
              result.hasActor = input.ReadUInt32(ref result.actor_);
              break;
            }
            case 26: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
            case 32: {
              result.hasBan = input.ReadBool(ref result.ban_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSession {
        get { return result.hasSession; }
      }
      [global::System.CLSCompliant(false)]
      public uint Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(uint value) {
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = 0;
        return this;
      }
      
      public bool HasActor {
        get { return result.hasActor; }
      }
      [global::System.CLSCompliant(false)]
      public uint Actor {
        get { return result.Actor; }
        set { SetActor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetActor(uint value) {
        PrepareBuilder();
        result.hasActor = true;
        result.actor_ = value;
        return this;
      }
      public Builder ClearActor() {
        PrepareBuilder();
        result.hasActor = false;
        result.actor_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
      
      public bool HasBan {
        get { return result.hasBan; }
      }
      public bool Ban {
        get { return result.Ban; }
        set { SetBan(value); }
      }
      public Builder SetBan(bool value) {
        PrepareBuilder();
        result.hasBan = true;
        result.ban_ = value;
        return this;
      }
      public Builder ClearBan() {
        PrepareBuilder();
        result.hasBan = false;
        result.ban_ = false;
        return this;
      }
    }
    static UserRemove() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class UserState : pb::GeneratedMessage<UserState, UserState.Builder> {
    private UserState() { }
    private static readonly UserState defaultInstance = new UserState().MakeReadOnly();
    private static readonly string[] _userStateFieldNames = new string[] { "actor", "channel_id", "comment", "comment_hash", "deaf", "hash", "mute", "name", "plugin_context", "plugin_identity", "priority_speaker", "recording", "self_deaf", "self_mute", "session", "suppress", "texture", "texture_hash", "user_id" };
    private static readonly uint[] _userStateFieldTags = new uint[] { 16, 40, 114, 130, 56, 122, 48, 26, 98, 106, 144, 152, 80, 72, 8, 64, 90, 138, 32 };
    public static UserState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserState, UserState.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserState__FieldAccessorTable; }
    }
    
    public const int SessionFieldNumber = 1;
    private bool hasSession;
    private uint session_;
    public bool HasSession {
      get { return hasSession; }
    }
    [global::System.CLSCompliant(false)]
    public uint Session {
      get { return session_; }
    }
    
    public const int ActorFieldNumber = 2;
    private bool hasActor;
    private uint actor_;
    public bool HasActor {
      get { return hasActor; }
    }
    [global::System.CLSCompliant(false)]
    public uint Actor {
      get { return actor_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int UserIdFieldNumber = 4;
    private bool hasUserId;
    private uint userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    [global::System.CLSCompliant(false)]
    public uint UserId {
      get { return userId_; }
    }
    
    public const int ChannelIdFieldNumber = 5;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public const int MuteFieldNumber = 6;
    private bool hasMute;
    private bool mute_;
    public bool HasMute {
      get { return hasMute; }
    }
    public bool Mute {
      get { return mute_; }
    }
    
    public const int DeafFieldNumber = 7;
    private bool hasDeaf;
    private bool deaf_;
    public bool HasDeaf {
      get { return hasDeaf; }
    }
    public bool Deaf {
      get { return deaf_; }
    }
    
    public const int SuppressFieldNumber = 8;
    private bool hasSuppress;
    private bool suppress_;
    public bool HasSuppress {
      get { return hasSuppress; }
    }
    public bool Suppress {
      get { return suppress_; }
    }
    
    public const int SelfMuteFieldNumber = 9;
    private bool hasSelfMute;
    private bool selfMute_;
    public bool HasSelfMute {
      get { return hasSelfMute; }
    }
    public bool SelfMute {
      get { return selfMute_; }
    }
    
    public const int SelfDeafFieldNumber = 10;
    private bool hasSelfDeaf;
    private bool selfDeaf_;
    public bool HasSelfDeaf {
      get { return hasSelfDeaf; }
    }
    public bool SelfDeaf {
      get { return selfDeaf_; }
    }
    
    public const int TextureFieldNumber = 11;
    private bool hasTexture;
    private pb::ByteString texture_ = pb::ByteString.Empty;
    public bool HasTexture {
      get { return hasTexture; }
    }
    public pb::ByteString Texture {
      get { return texture_; }
    }
    
    public const int PluginContextFieldNumber = 12;
    private bool hasPluginContext;
    private pb::ByteString pluginContext_ = pb::ByteString.Empty;
    public bool HasPluginContext {
      get { return hasPluginContext; }
    }
    public pb::ByteString PluginContext {
      get { return pluginContext_; }
    }
    
    public const int PluginIdentityFieldNumber = 13;
    private bool hasPluginIdentity;
    private string pluginIdentity_ = "";
    public bool HasPluginIdentity {
      get { return hasPluginIdentity; }
    }
    public string PluginIdentity {
      get { return pluginIdentity_; }
    }
    
    public const int CommentFieldNumber = 14;
    private bool hasComment;
    private string comment_ = "";
    public bool HasComment {
      get { return hasComment; }
    }
    public string Comment {
      get { return comment_; }
    }
    
    public const int HashFieldNumber = 15;
    private bool hasHash;
    private string hash_ = "";
    public bool HasHash {
      get { return hasHash; }
    }
    public string Hash {
      get { return hash_; }
    }
    
    public const int CommentHashFieldNumber = 16;
    private bool hasCommentHash;
    private pb::ByteString commentHash_ = pb::ByteString.Empty;
    public bool HasCommentHash {
      get { return hasCommentHash; }
    }
    public pb::ByteString CommentHash {
      get { return commentHash_; }
    }
    
    public const int TextureHashFieldNumber = 17;
    private bool hasTextureHash;
    private pb::ByteString textureHash_ = pb::ByteString.Empty;
    public bool HasTextureHash {
      get { return hasTextureHash; }
    }
    public pb::ByteString TextureHash {
      get { return textureHash_; }
    }
    
    public const int PrioritySpeakerFieldNumber = 18;
    private bool hasPrioritySpeaker;
    private bool prioritySpeaker_;
    public bool HasPrioritySpeaker {
      get { return hasPrioritySpeaker; }
    }
    public bool PrioritySpeaker {
      get { return prioritySpeaker_; }
    }
    
    public const int RecordingFieldNumber = 19;
    private bool hasRecording;
    private bool recording_;
    public bool HasRecording {
      get { return hasRecording; }
    }
    public bool Recording {
      get { return recording_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userStateFieldNames;
      if (hasSession) {
        output.WriteUInt32(1, field_names[14], Session);
      }
      if (hasActor) {
        output.WriteUInt32(2, field_names[0], Actor);
      }
      if (hasName) {
        output.WriteString(3, field_names[7], Name);
      }
      if (hasUserId) {
        output.WriteUInt32(4, field_names[18], UserId);
      }
      if (hasChannelId) {
        output.WriteUInt32(5, field_names[1], ChannelId);
      }
      if (hasMute) {
        output.WriteBool(6, field_names[6], Mute);
      }
      if (hasDeaf) {
        output.WriteBool(7, field_names[4], Deaf);
      }
      if (hasSuppress) {
        output.WriteBool(8, field_names[15], Suppress);
      }
      if (hasSelfMute) {
        output.WriteBool(9, field_names[13], SelfMute);
      }
      if (hasSelfDeaf) {
        output.WriteBool(10, field_names[12], SelfDeaf);
      }
      if (hasTexture) {
        output.WriteBytes(11, field_names[16], Texture);
      }
      if (hasPluginContext) {
        output.WriteBytes(12, field_names[8], PluginContext);
      }
      if (hasPluginIdentity) {
        output.WriteString(13, field_names[9], PluginIdentity);
      }
      if (hasComment) {
        output.WriteString(14, field_names[2], Comment);
      }
      if (hasHash) {
        output.WriteString(15, field_names[5], Hash);
      }
      if (hasCommentHash) {
        output.WriteBytes(16, field_names[3], CommentHash);
      }
      if (hasTextureHash) {
        output.WriteBytes(17, field_names[17], TextureHash);
      }
      if (hasPrioritySpeaker) {
        output.WriteBool(18, field_names[10], PrioritySpeaker);
      }
      if (hasRecording) {
        output.WriteBool(19, field_names[11], Recording);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Session);
      }
      if (hasActor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Actor);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, UserId);
      }
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ChannelId);
      }
      if (hasMute) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Mute);
      }
      if (hasDeaf) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, Deaf);
      }
      if (hasSuppress) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Suppress);
      }
      if (hasSelfMute) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, SelfMute);
      }
      if (hasSelfDeaf) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, SelfDeaf);
      }
      if (hasTexture) {
        size += pb::CodedOutputStream.ComputeBytesSize(11, Texture);
      }
      if (hasPluginContext) {
        size += pb::CodedOutputStream.ComputeBytesSize(12, PluginContext);
      }
      if (hasPluginIdentity) {
        size += pb::CodedOutputStream.ComputeStringSize(13, PluginIdentity);
      }
      if (hasComment) {
        size += pb::CodedOutputStream.ComputeStringSize(14, Comment);
      }
      if (hasHash) {
        size += pb::CodedOutputStream.ComputeStringSize(15, Hash);
      }
      if (hasCommentHash) {
        size += pb::CodedOutputStream.ComputeBytesSize(16, CommentHash);
      }
      if (hasTextureHash) {
        size += pb::CodedOutputStream.ComputeBytesSize(17, TextureHash);
      }
      if (hasPrioritySpeaker) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, PrioritySpeaker);
      }
      if (hasRecording) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, Recording);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<UserState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserState result;
      
      private UserState PrepareBuilder() {
        if (resultIsReadOnly) {
          UserState original = result;
          result = new UserState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.UserState.Descriptor; }
      }
      
      public override UserState DefaultInstanceForType {
        get { return global::Mumble.NET.UserState.DefaultInstance; }
      }
      
      public override UserState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserState) {
          return MergeFrom((UserState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserState other) {
        if (other == global::Mumble.NET.UserState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSession) {
          Session = other.Session;
        }
        if (other.HasActor) {
          Actor = other.Actor;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        if (other.HasMute) {
          Mute = other.Mute;
        }
        if (other.HasDeaf) {
          Deaf = other.Deaf;
        }
        if (other.HasSuppress) {
          Suppress = other.Suppress;
        }
        if (other.HasSelfMute) {
          SelfMute = other.SelfMute;
        }
        if (other.HasSelfDeaf) {
          SelfDeaf = other.SelfDeaf;
        }
        if (other.HasTexture) {
          Texture = other.Texture;
        }
        if (other.HasPluginContext) {
          PluginContext = other.PluginContext;
        }
        if (other.HasPluginIdentity) {
          PluginIdentity = other.PluginIdentity;
        }
        if (other.HasComment) {
          Comment = other.Comment;
        }
        if (other.HasHash) {
          Hash = other.Hash;
        }
        if (other.HasCommentHash) {
          CommentHash = other.CommentHash;
        }
        if (other.HasTextureHash) {
          TextureHash = other.TextureHash;
        }
        if (other.HasPrioritySpeaker) {
          PrioritySpeaker = other.PrioritySpeaker;
        }
        if (other.HasRecording) {
          Recording = other.Recording;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSession = input.ReadUInt32(ref result.session_);
              break;
            }
            case 16: {
              result.hasActor = input.ReadUInt32(ref result.actor_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasUserId = input.ReadUInt32(ref result.userId_);
              break;
            }
            case 40: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
            case 48: {
              result.hasMute = input.ReadBool(ref result.mute_);
              break;
            }
            case 56: {
              result.hasDeaf = input.ReadBool(ref result.deaf_);
              break;
            }
            case 64: {
              result.hasSuppress = input.ReadBool(ref result.suppress_);
              break;
            }
            case 72: {
              result.hasSelfMute = input.ReadBool(ref result.selfMute_);
              break;
            }
            case 80: {
              result.hasSelfDeaf = input.ReadBool(ref result.selfDeaf_);
              break;
            }
            case 90: {
              result.hasTexture = input.ReadBytes(ref result.texture_);
              break;
            }
            case 98: {
              result.hasPluginContext = input.ReadBytes(ref result.pluginContext_);
              break;
            }
            case 106: {
              result.hasPluginIdentity = input.ReadString(ref result.pluginIdentity_);
              break;
            }
            case 114: {
              result.hasComment = input.ReadString(ref result.comment_);
              break;
            }
            case 122: {
              result.hasHash = input.ReadString(ref result.hash_);
              break;
            }
            case 130: {
              result.hasCommentHash = input.ReadBytes(ref result.commentHash_);
              break;
            }
            case 138: {
              result.hasTextureHash = input.ReadBytes(ref result.textureHash_);
              break;
            }
            case 144: {
              result.hasPrioritySpeaker = input.ReadBool(ref result.prioritySpeaker_);
              break;
            }
            case 152: {
              result.hasRecording = input.ReadBool(ref result.recording_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSession {
        get { return result.hasSession; }
      }
      [global::System.CLSCompliant(false)]
      public uint Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(uint value) {
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = 0;
        return this;
      }
      
      public bool HasActor {
        get { return result.hasActor; }
      }
      [global::System.CLSCompliant(false)]
      public uint Actor {
        get { return result.Actor; }
        set { SetActor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetActor(uint value) {
        PrepareBuilder();
        result.hasActor = true;
        result.actor_ = value;
        return this;
      }
      public Builder ClearActor() {
        PrepareBuilder();
        result.hasActor = false;
        result.actor_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      [global::System.CLSCompliant(false)]
      public uint UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUserId(uint value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
      
      public bool HasMute {
        get { return result.hasMute; }
      }
      public bool Mute {
        get { return result.Mute; }
        set { SetMute(value); }
      }
      public Builder SetMute(bool value) {
        PrepareBuilder();
        result.hasMute = true;
        result.mute_ = value;
        return this;
      }
      public Builder ClearMute() {
        PrepareBuilder();
        result.hasMute = false;
        result.mute_ = false;
        return this;
      }
      
      public bool HasDeaf {
        get { return result.hasDeaf; }
      }
      public bool Deaf {
        get { return result.Deaf; }
        set { SetDeaf(value); }
      }
      public Builder SetDeaf(bool value) {
        PrepareBuilder();
        result.hasDeaf = true;
        result.deaf_ = value;
        return this;
      }
      public Builder ClearDeaf() {
        PrepareBuilder();
        result.hasDeaf = false;
        result.deaf_ = false;
        return this;
      }
      
      public bool HasSuppress {
        get { return result.hasSuppress; }
      }
      public bool Suppress {
        get { return result.Suppress; }
        set { SetSuppress(value); }
      }
      public Builder SetSuppress(bool value) {
        PrepareBuilder();
        result.hasSuppress = true;
        result.suppress_ = value;
        return this;
      }
      public Builder ClearSuppress() {
        PrepareBuilder();
        result.hasSuppress = false;
        result.suppress_ = false;
        return this;
      }
      
      public bool HasSelfMute {
        get { return result.hasSelfMute; }
      }
      public bool SelfMute {
        get { return result.SelfMute; }
        set { SetSelfMute(value); }
      }
      public Builder SetSelfMute(bool value) {
        PrepareBuilder();
        result.hasSelfMute = true;
        result.selfMute_ = value;
        return this;
      }
      public Builder ClearSelfMute() {
        PrepareBuilder();
        result.hasSelfMute = false;
        result.selfMute_ = false;
        return this;
      }
      
      public bool HasSelfDeaf {
        get { return result.hasSelfDeaf; }
      }
      public bool SelfDeaf {
        get { return result.SelfDeaf; }
        set { SetSelfDeaf(value); }
      }
      public Builder SetSelfDeaf(bool value) {
        PrepareBuilder();
        result.hasSelfDeaf = true;
        result.selfDeaf_ = value;
        return this;
      }
      public Builder ClearSelfDeaf() {
        PrepareBuilder();
        result.hasSelfDeaf = false;
        result.selfDeaf_ = false;
        return this;
      }
      
      public bool HasTexture {
        get { return result.hasTexture; }
      }
      public pb::ByteString Texture {
        get { return result.Texture; }
        set { SetTexture(value); }
      }
      public Builder SetTexture(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTexture = true;
        result.texture_ = value;
        return this;
      }
      public Builder ClearTexture() {
        PrepareBuilder();
        result.hasTexture = false;
        result.texture_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasPluginContext {
        get { return result.hasPluginContext; }
      }
      public pb::ByteString PluginContext {
        get { return result.PluginContext; }
        set { SetPluginContext(value); }
      }
      public Builder SetPluginContext(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPluginContext = true;
        result.pluginContext_ = value;
        return this;
      }
      public Builder ClearPluginContext() {
        PrepareBuilder();
        result.hasPluginContext = false;
        result.pluginContext_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasPluginIdentity {
        get { return result.hasPluginIdentity; }
      }
      public string PluginIdentity {
        get { return result.PluginIdentity; }
        set { SetPluginIdentity(value); }
      }
      public Builder SetPluginIdentity(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPluginIdentity = true;
        result.pluginIdentity_ = value;
        return this;
      }
      public Builder ClearPluginIdentity() {
        PrepareBuilder();
        result.hasPluginIdentity = false;
        result.pluginIdentity_ = "";
        return this;
      }
      
      public bool HasComment {
        get { return result.hasComment; }
      }
      public string Comment {
        get { return result.Comment; }
        set { SetComment(value); }
      }
      public Builder SetComment(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasComment = true;
        result.comment_ = value;
        return this;
      }
      public Builder ClearComment() {
        PrepareBuilder();
        result.hasComment = false;
        result.comment_ = "";
        return this;
      }
      
      public bool HasHash {
        get { return result.hasHash; }
      }
      public string Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        PrepareBuilder();
        result.hasHash = false;
        result.hash_ = "";
        return this;
      }
      
      public bool HasCommentHash {
        get { return result.hasCommentHash; }
      }
      public pb::ByteString CommentHash {
        get { return result.CommentHash; }
        set { SetCommentHash(value); }
      }
      public Builder SetCommentHash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommentHash = true;
        result.commentHash_ = value;
        return this;
      }
      public Builder ClearCommentHash() {
        PrepareBuilder();
        result.hasCommentHash = false;
        result.commentHash_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasTextureHash {
        get { return result.hasTextureHash; }
      }
      public pb::ByteString TextureHash {
        get { return result.TextureHash; }
        set { SetTextureHash(value); }
      }
      public Builder SetTextureHash(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTextureHash = true;
        result.textureHash_ = value;
        return this;
      }
      public Builder ClearTextureHash() {
        PrepareBuilder();
        result.hasTextureHash = false;
        result.textureHash_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasPrioritySpeaker {
        get { return result.hasPrioritySpeaker; }
      }
      public bool PrioritySpeaker {
        get { return result.PrioritySpeaker; }
        set { SetPrioritySpeaker(value); }
      }
      public Builder SetPrioritySpeaker(bool value) {
        PrepareBuilder();
        result.hasPrioritySpeaker = true;
        result.prioritySpeaker_ = value;
        return this;
      }
      public Builder ClearPrioritySpeaker() {
        PrepareBuilder();
        result.hasPrioritySpeaker = false;
        result.prioritySpeaker_ = false;
        return this;
      }
      
      public bool HasRecording {
        get { return result.hasRecording; }
      }
      public bool Recording {
        get { return result.Recording; }
        set { SetRecording(value); }
      }
      public Builder SetRecording(bool value) {
        PrepareBuilder();
        result.hasRecording = true;
        result.recording_ = value;
        return this;
      }
      public Builder ClearRecording() {
        PrepareBuilder();
        result.hasRecording = false;
        result.recording_ = false;
        return this;
      }
    }
    static UserState() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class BanList : pb::GeneratedMessage<BanList, BanList.Builder> {
    private BanList() { }
    private static readonly BanList defaultInstance = new BanList().MakeReadOnly();
    private static readonly string[] _banListFieldNames = new string[] { "bans", "query" };
    private static readonly uint[] _banListFieldTags = new uint[] { 10, 16 };
    public static BanList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BanList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BanList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_BanList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BanList, BanList.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_BanList__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public sealed partial class BanEntry : pb::GeneratedMessage<BanEntry, BanEntry.Builder> {
        private BanEntry() { }
        private static readonly BanEntry defaultInstance = new BanEntry().MakeReadOnly();
        private static readonly string[] _banEntryFieldNames = new string[] { "address", "duration", "hash", "mask", "name", "reason", "start" };
        private static readonly uint[] _banEntryFieldTags = new uint[] { 10, 56, 34, 16, 26, 42, 50 };
        public static BanEntry DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override BanEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override BanEntry ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_BanList_BanEntry__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<BanEntry, BanEntry.Builder> InternalFieldAccessors {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_BanList_BanEntry__FieldAccessorTable; }
        }
        
        public const int AddressFieldNumber = 1;
        private bool hasAddress;
        private pb::ByteString address_ = pb::ByteString.Empty;
        public bool HasAddress {
          get { return hasAddress; }
        }
        public pb::ByteString Address {
          get { return address_; }
        }
        
        public const int MaskFieldNumber = 2;
        private bool hasMask;
        private uint mask_;
        public bool HasMask {
          get { return hasMask; }
        }
        [global::System.CLSCompliant(false)]
        public uint Mask {
          get { return mask_; }
        }
        
        public const int NameFieldNumber = 3;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int HashFieldNumber = 4;
        private bool hasHash;
        private string hash_ = "";
        public bool HasHash {
          get { return hasHash; }
        }
        public string Hash {
          get { return hash_; }
        }
        
        public const int ReasonFieldNumber = 5;
        private bool hasReason;
        private string reason_ = "";
        public bool HasReason {
          get { return hasReason; }
        }
        public string Reason {
          get { return reason_; }
        }
        
        public const int StartFieldNumber = 6;
        private bool hasStart;
        private string start_ = "";
        public bool HasStart {
          get { return hasStart; }
        }
        public string Start {
          get { return start_; }
        }
        
        public const int DurationFieldNumber = 7;
        private bool hasDuration;
        private uint duration_;
        public bool HasDuration {
          get { return hasDuration; }
        }
        [global::System.CLSCompliant(false)]
        public uint Duration {
          get { return duration_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasAddress) return false;
            if (!hasMask) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _banEntryFieldNames;
          if (hasAddress) {
            output.WriteBytes(1, field_names[0], Address);
          }
          if (hasMask) {
            output.WriteUInt32(2, field_names[3], Mask);
          }
          if (hasName) {
            output.WriteString(3, field_names[4], Name);
          }
          if (hasHash) {
            output.WriteString(4, field_names[2], Hash);
          }
          if (hasReason) {
            output.WriteString(5, field_names[5], Reason);
          }
          if (hasStart) {
            output.WriteString(6, field_names[6], Start);
          }
          if (hasDuration) {
            output.WriteUInt32(7, field_names[1], Duration);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasAddress) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Address);
          }
          if (hasMask) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, Mask);
          }
          if (hasName) {
            size += pb::CodedOutputStream.ComputeStringSize(3, Name);
          }
          if (hasHash) {
            size += pb::CodedOutputStream.ComputeStringSize(4, Hash);
          }
          if (hasReason) {
            size += pb::CodedOutputStream.ComputeStringSize(5, Reason);
          }
          if (hasStart) {
            size += pb::CodedOutputStream.ComputeStringSize(6, Start);
          }
          if (hasDuration) {
            size += pb::CodedOutputStream.ComputeUInt32Size(7, Duration);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static BanEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BanEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BanEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BanEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BanEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BanEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BanEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BanEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BanEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BanEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BanEntry MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BanEntry prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
        public sealed partial class Builder : pb::GeneratedBuilder<BanEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(BanEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private BanEntry result;
          
          private BanEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              BanEntry original = result;
              result = new BanEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override BanEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mumble.NET.BanList.Types.BanEntry.Descriptor; }
          }
          
          public override BanEntry DefaultInstanceForType {
            get { return global::Mumble.NET.BanList.Types.BanEntry.DefaultInstance; }
          }
          
          public override BanEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is BanEntry) {
              return MergeFrom((BanEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(BanEntry other) {
            if (other == global::Mumble.NET.BanList.Types.BanEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAddress) {
              Address = other.Address;
            }
            if (other.HasMask) {
              Mask = other.Mask;
            }
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasHash) {
              Hash = other.Hash;
            }
            if (other.HasReason) {
              Reason = other.Reason;
            }
            if (other.HasStart) {
              Start = other.Start;
            }
            if (other.HasDuration) {
              Duration = other.Duration;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_banEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _banEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasAddress = input.ReadBytes(ref result.address_);
                  break;
                }
                case 16: {
                  result.hasMask = input.ReadUInt32(ref result.mask_);
                  break;
                }
                case 26: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 34: {
                  result.hasHash = input.ReadString(ref result.hash_);
                  break;
                }
                case 42: {
                  result.hasReason = input.ReadString(ref result.reason_);
                  break;
                }
                case 50: {
                  result.hasStart = input.ReadString(ref result.start_);
                  break;
                }
                case 56: {
                  result.hasDuration = input.ReadUInt32(ref result.duration_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasAddress {
            get { return result.hasAddress; }
          }
          public pb::ByteString Address {
            get { return result.Address; }
            set { SetAddress(value); }
          }
          public Builder SetAddress(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAddress = true;
            result.address_ = value;
            return this;
          }
          public Builder ClearAddress() {
            PrepareBuilder();
            result.hasAddress = false;
            result.address_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasMask {
            get { return result.hasMask; }
          }
          [global::System.CLSCompliant(false)]
          public uint Mask {
            get { return result.Mask; }
            set { SetMask(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetMask(uint value) {
            PrepareBuilder();
            result.hasMask = true;
            result.mask_ = value;
            return this;
          }
          public Builder ClearMask() {
            PrepareBuilder();
            result.hasMask = false;
            result.mask_ = 0;
            return this;
          }
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasHash {
            get { return result.hasHash; }
          }
          public string Hash {
            get { return result.Hash; }
            set { SetHash(value); }
          }
          public Builder SetHash(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasHash = true;
            result.hash_ = value;
            return this;
          }
          public Builder ClearHash() {
            PrepareBuilder();
            result.hasHash = false;
            result.hash_ = "";
            return this;
          }
          
          public bool HasReason {
            get { return result.hasReason; }
          }
          public string Reason {
            get { return result.Reason; }
            set { SetReason(value); }
          }
          public Builder SetReason(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasReason = true;
            result.reason_ = value;
            return this;
          }
          public Builder ClearReason() {
            PrepareBuilder();
            result.hasReason = false;
            result.reason_ = "";
            return this;
          }
          
          public bool HasStart {
            get { return result.hasStart; }
          }
          public string Start {
            get { return result.Start; }
            set { SetStart(value); }
          }
          public Builder SetStart(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStart = true;
            result.start_ = value;
            return this;
          }
          public Builder ClearStart() {
            PrepareBuilder();
            result.hasStart = false;
            result.start_ = "";
            return this;
          }
          
          public bool HasDuration {
            get { return result.hasDuration; }
          }
          [global::System.CLSCompliant(false)]
          public uint Duration {
            get { return result.Duration; }
            set { SetDuration(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetDuration(uint value) {
            PrepareBuilder();
            result.hasDuration = true;
            result.duration_ = value;
            return this;
          }
          public Builder ClearDuration() {
            PrepareBuilder();
            result.hasDuration = false;
            result.duration_ = 0;
            return this;
          }
        }
        static BanEntry() {
          object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int BansFieldNumber = 1;
    private pbc::PopsicleList<global::Mumble.NET.BanList.Types.BanEntry> bans_ = new pbc::PopsicleList<global::Mumble.NET.BanList.Types.BanEntry>();
    public scg::IList<global::Mumble.NET.BanList.Types.BanEntry> BansList {
      get { return bans_; }
    }
    public int BansCount {
      get { return bans_.Count; }
    }
    public global::Mumble.NET.BanList.Types.BanEntry GetBans(int index) {
      return bans_[index];
    }
    
    public const int QueryFieldNumber = 2;
    private bool hasQuery;
    private bool query_;
    public bool HasQuery {
      get { return hasQuery; }
    }
    public bool Query {
      get { return query_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Mumble.NET.BanList.Types.BanEntry element in BansList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _banListFieldNames;
      if (bans_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], bans_);
      }
      if (hasQuery) {
        output.WriteBool(2, field_names[1], Query);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Mumble.NET.BanList.Types.BanEntry element in BansList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasQuery) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Query);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BanList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BanList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BanList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BanList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BanList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BanList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BanList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BanList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BanList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BanList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BanList MakeReadOnly() {
      bans_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BanList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<BanList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BanList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BanList result;
      
      private BanList PrepareBuilder() {
        if (resultIsReadOnly) {
          BanList original = result;
          result = new BanList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BanList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.BanList.Descriptor; }
      }
      
      public override BanList DefaultInstanceForType {
        get { return global::Mumble.NET.BanList.DefaultInstance; }
      }
      
      public override BanList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BanList) {
          return MergeFrom((BanList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BanList other) {
        if (other == global::Mumble.NET.BanList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.bans_.Count != 0) {
          result.bans_.Add(other.bans_);
        }
        if (other.HasQuery) {
          Query = other.Query;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_banListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _banListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.bans_, global::Mumble.NET.BanList.Types.BanEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasQuery = input.ReadBool(ref result.query_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Mumble.NET.BanList.Types.BanEntry> BansList {
        get { return PrepareBuilder().bans_; }
      }
      public int BansCount {
        get { return result.BansCount; }
      }
      public global::Mumble.NET.BanList.Types.BanEntry GetBans(int index) {
        return result.GetBans(index);
      }
      public Builder SetBans(int index, global::Mumble.NET.BanList.Types.BanEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bans_[index] = value;
        return this;
      }
      public Builder SetBans(int index, global::Mumble.NET.BanList.Types.BanEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bans_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBans(global::Mumble.NET.BanList.Types.BanEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bans_.Add(value);
        return this;
      }
      public Builder AddBans(global::Mumble.NET.BanList.Types.BanEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bans_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBans(scg::IEnumerable<global::Mumble.NET.BanList.Types.BanEntry> values) {
        PrepareBuilder();
        result.bans_.Add(values);
        return this;
      }
      public Builder ClearBans() {
        PrepareBuilder();
        result.bans_.Clear();
        return this;
      }
      
      public bool HasQuery {
        get { return result.hasQuery; }
      }
      public bool Query {
        get { return result.Query; }
        set { SetQuery(value); }
      }
      public Builder SetQuery(bool value) {
        PrepareBuilder();
        result.hasQuery = true;
        result.query_ = value;
        return this;
      }
      public Builder ClearQuery() {
        PrepareBuilder();
        result.hasQuery = false;
        result.query_ = false;
        return this;
      }
    }
    static BanList() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class TextMessage : pb::GeneratedMessage<TextMessage, TextMessage.Builder> {
    private TextMessage() { }
    private static readonly TextMessage defaultInstance = new TextMessage().MakeReadOnly();
    private static readonly string[] _textMessageFieldNames = new string[] { "actor", "channel_id", "message", "session", "tree_id" };
    private static readonly uint[] _textMessageFieldTags = new uint[] { 8, 24, 42, 16, 32 };
    public static TextMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TextMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TextMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_TextMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TextMessage, TextMessage.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_TextMessage__FieldAccessorTable; }
    }
    
    public const int ActorFieldNumber = 1;
    private bool hasActor;
    private uint actor_;
    public bool HasActor {
      get { return hasActor; }
    }
    [global::System.CLSCompliant(false)]
    public uint Actor {
      get { return actor_; }
    }
    
    public const int SessionFieldNumber = 2;
    private pbc::PopsicleList<uint> session_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> SessionList {
      get { return pbc::Lists.AsReadOnly(session_); }
    }
    public int SessionCount {
      get { return session_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetSession(int index) {
      return session_[index];
    }
    
    public const int ChannelIdFieldNumber = 3;
    private pbc::PopsicleList<uint> channelId_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ChannelIdList {
      get { return pbc::Lists.AsReadOnly(channelId_); }
    }
    public int ChannelIdCount {
      get { return channelId_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetChannelId(int index) {
      return channelId_[index];
    }
    
    public const int TreeIdFieldNumber = 4;
    private pbc::PopsicleList<uint> treeId_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> TreeIdList {
      get { return pbc::Lists.AsReadOnly(treeId_); }
    }
    public int TreeIdCount {
      get { return treeId_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetTreeId(int index) {
      return treeId_[index];
    }
    
    public const int MessageFieldNumber = 5;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _textMessageFieldNames;
      if (hasActor) {
        output.WriteUInt32(1, field_names[0], Actor);
      }
      if (session_.Count > 0) {
        output.WriteUInt32Array(2, field_names[3], session_);
      }
      if (channelId_.Count > 0) {
        output.WriteUInt32Array(3, field_names[1], channelId_);
      }
      if (treeId_.Count > 0) {
        output.WriteUInt32Array(4, field_names[4], treeId_);
      }
      if (hasMessage) {
        output.WriteString(5, field_names[2], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasActor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Actor);
      }
      {
        int dataSize = 0;
        foreach (uint element in SessionList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * session_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in ChannelIdList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * channelId_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in TreeIdList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * treeId_.Count;
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TextMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TextMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TextMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TextMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TextMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TextMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TextMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TextMessage MakeReadOnly() {
      session_.MakeReadOnly();
      channelId_.MakeReadOnly();
      treeId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TextMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<TextMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TextMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TextMessage result;
      
      private TextMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          TextMessage original = result;
          result = new TextMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TextMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.TextMessage.Descriptor; }
      }
      
      public override TextMessage DefaultInstanceForType {
        get { return global::Mumble.NET.TextMessage.DefaultInstance; }
      }
      
      public override TextMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TextMessage) {
          return MergeFrom((TextMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TextMessage other) {
        if (other == global::Mumble.NET.TextMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActor) {
          Actor = other.Actor;
        }
        if (other.session_.Count != 0) {
          result.session_.Add(other.session_);
        }
        if (other.channelId_.Count != 0) {
          result.channelId_.Add(other.channelId_);
        }
        if (other.treeId_.Count != 0) {
          result.treeId_.Add(other.treeId_);
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_textMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _textMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasActor = input.ReadUInt32(ref result.actor_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.session_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.channelId_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt32Array(tag, field_name, result.treeId_);
              break;
            }
            case 42: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasActor {
        get { return result.hasActor; }
      }
      [global::System.CLSCompliant(false)]
      public uint Actor {
        get { return result.Actor; }
        set { SetActor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetActor(uint value) {
        PrepareBuilder();
        result.hasActor = true;
        result.actor_ = value;
        return this;
      }
      public Builder ClearActor() {
        PrepareBuilder();
        result.hasActor = false;
        result.actor_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> SessionList {
        get { return PrepareBuilder().session_; }
      }
      public int SessionCount {
        get { return result.SessionCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetSession(int index) {
        return result.GetSession(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(int index, uint value) {
        PrepareBuilder();
        result.session_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddSession(uint value) {
        PrepareBuilder();
        result.session_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeSession(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.session_.Add(values);
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.session_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ChannelIdList {
        get { return PrepareBuilder().channelId_; }
      }
      public int ChannelIdCount {
        get { return result.ChannelIdCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetChannelId(int index) {
        return result.GetChannelId(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(int index, uint value) {
        PrepareBuilder();
        result.channelId_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddChannelId(uint value) {
        PrepareBuilder();
        result.channelId_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeChannelId(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.channelId_.Add(values);
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.channelId_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> TreeIdList {
        get { return PrepareBuilder().treeId_; }
      }
      public int TreeIdCount {
        get { return result.TreeIdCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetTreeId(int index) {
        return result.GetTreeId(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTreeId(int index, uint value) {
        PrepareBuilder();
        result.treeId_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddTreeId(uint value) {
        PrepareBuilder();
        result.treeId_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeTreeId(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.treeId_.Add(values);
        return this;
      }
      public Builder ClearTreeId() {
        PrepareBuilder();
        result.treeId_.Clear();
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static TextMessage() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class PermissionDenied : pb::GeneratedMessage<PermissionDenied, PermissionDenied.Builder> {
    private PermissionDenied() { }
    private static readonly PermissionDenied defaultInstance = new PermissionDenied().MakeReadOnly();
    private static readonly string[] _permissionDeniedFieldNames = new string[] { "channel_id", "name", "permission", "reason", "session", "type" };
    private static readonly uint[] _permissionDeniedFieldTags = new uint[] { 16, 50, 8, 34, 24, 40 };
    public static PermissionDenied DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PermissionDenied DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PermissionDenied ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_PermissionDenied__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PermissionDenied, PermissionDenied.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_PermissionDenied__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public enum DenyType {
        Text = 0,
        Permission = 1,
        SuperUser = 2,
        ChannelName = 3,
        TextTooLong = 4,
        H9K = 5,
        TemporaryChannel = 6,
        MissingCertificate = 7,
        UserName = 8,
        ChannelFull = 9,
        NestingLimit = 10,
      }
      
    }
    #endregion
    
    public const int PermissionFieldNumber = 1;
    private bool hasPermission;
    private uint permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    [global::System.CLSCompliant(false)]
    public uint Permission {
      get { return permission_; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public const int SessionFieldNumber = 3;
    private bool hasSession;
    private uint session_;
    public bool HasSession {
      get { return hasSession; }
    }
    [global::System.CLSCompliant(false)]
    public uint Session {
      get { return session_; }
    }
    
    public const int ReasonFieldNumber = 4;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public const int TypeFieldNumber = 5;
    private bool hasType;
    private global::Mumble.NET.PermissionDenied.Types.DenyType type_ = global::Mumble.NET.PermissionDenied.Types.DenyType.Text;
    public bool HasType {
      get { return hasType; }
    }
    public global::Mumble.NET.PermissionDenied.Types.DenyType Type {
      get { return type_; }
    }
    
    public const int NameFieldNumber = 6;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _permissionDeniedFieldNames;
      if (hasPermission) {
        output.WriteUInt32(1, field_names[2], Permission);
      }
      if (hasChannelId) {
        output.WriteUInt32(2, field_names[0], ChannelId);
      }
      if (hasSession) {
        output.WriteUInt32(3, field_names[4], Session);
      }
      if (hasReason) {
        output.WriteString(4, field_names[3], Reason);
      }
      if (hasType) {
        output.WriteEnum(5, field_names[5], (int) Type, Type);
      }
      if (hasName) {
        output.WriteString(6, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPermission) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Permission);
      }
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ChannelId);
      }
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Session);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Reason);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Type);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PermissionDenied ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PermissionDenied ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PermissionDenied ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PermissionDenied ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PermissionDenied ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PermissionDenied ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PermissionDenied ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PermissionDenied ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PermissionDenied ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PermissionDenied ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PermissionDenied MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PermissionDenied prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<PermissionDenied, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PermissionDenied cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PermissionDenied result;
      
      private PermissionDenied PrepareBuilder() {
        if (resultIsReadOnly) {
          PermissionDenied original = result;
          result = new PermissionDenied();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PermissionDenied MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.PermissionDenied.Descriptor; }
      }
      
      public override PermissionDenied DefaultInstanceForType {
        get { return global::Mumble.NET.PermissionDenied.DefaultInstance; }
      }
      
      public override PermissionDenied BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PermissionDenied) {
          return MergeFrom((PermissionDenied) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PermissionDenied other) {
        if (other == global::Mumble.NET.PermissionDenied.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPermission) {
          Permission = other.Permission;
        }
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        if (other.HasSession) {
          Session = other.Session;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_permissionDeniedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _permissionDeniedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPermission = input.ReadUInt32(ref result.permission_);
              break;
            }
            case 16: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
            case 24: {
              result.hasSession = input.ReadUInt32(ref result.session_);
              break;
            }
            case 34: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
            case 50: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPermission {
        get { return result.hasPermission; }
      }
      [global::System.CLSCompliant(false)]
      public uint Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPermission(uint value) {
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = 0;
        return this;
      }
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
      
      public bool HasSession {
        get { return result.hasSession; }
      }
      [global::System.CLSCompliant(false)]
      public uint Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(uint value) {
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Mumble.NET.PermissionDenied.Types.DenyType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Mumble.NET.PermissionDenied.Types.DenyType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Mumble.NET.PermissionDenied.Types.DenyType.Text;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static PermissionDenied() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ACL : pb::GeneratedMessage<ACL, ACL.Builder> {
    private ACL() { }
    private static readonly ACL defaultInstance = new ACL().MakeReadOnly();
    private static readonly string[] _aCLFieldNames = new string[] { "acls", "channel_id", "groups", "inherit_acls", "query" };
    private static readonly uint[] _aCLFieldTags = new uint[] { 34, 8, 26, 16, 40 };
    public static ACL DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ACL DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ACL ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ACL__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ACL, ACL.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ACL__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public sealed partial class ChanGroup : pb::GeneratedMessage<ChanGroup, ChanGroup.Builder> {
        private ChanGroup() { }
        private static readonly ChanGroup defaultInstance = new ChanGroup().MakeReadOnly();
        private static readonly string[] _chanGroupFieldNames = new string[] { "add", "inherit", "inheritable", "inherited", "inherited_members", "name", "remove" };
        private static readonly uint[] _chanGroupFieldTags = new uint[] { 40, 24, 32, 16, 56, 10, 48 };
        public static ChanGroup DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ChanGroup DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ChanGroup ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ACL_ChanGroup__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ChanGroup, ChanGroup.Builder> InternalFieldAccessors {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ACL_ChanGroup__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int InheritedFieldNumber = 2;
        private bool hasInherited;
        private bool inherited_ = true;
        public bool HasInherited {
          get { return hasInherited; }
        }
        public bool Inherited {
          get { return inherited_; }
        }
        
        public const int InheritFieldNumber = 3;
        private bool hasInherit;
        private bool inherit_ = true;
        public bool HasInherit {
          get { return hasInherit; }
        }
        public bool Inherit {
          get { return inherit_; }
        }
        
        public const int InheritableFieldNumber = 4;
        private bool hasInheritable;
        private bool inheritable_ = true;
        public bool HasInheritable {
          get { return hasInheritable; }
        }
        public bool Inheritable {
          get { return inheritable_; }
        }
        
        public const int AddFieldNumber = 5;
        private pbc::PopsicleList<uint> add_ = new pbc::PopsicleList<uint>();
        [global::System.CLSCompliant(false)]
        public scg::IList<uint> AddList {
          get { return pbc::Lists.AsReadOnly(add_); }
        }
        public int AddCount {
          get { return add_.Count; }
        }
        [global::System.CLSCompliant(false)]
        public uint GetAdd(int index) {
          return add_[index];
        }
        
        public const int RemoveFieldNumber = 6;
        private pbc::PopsicleList<uint> remove_ = new pbc::PopsicleList<uint>();
        [global::System.CLSCompliant(false)]
        public scg::IList<uint> RemoveList {
          get { return pbc::Lists.AsReadOnly(remove_); }
        }
        public int RemoveCount {
          get { return remove_.Count; }
        }
        [global::System.CLSCompliant(false)]
        public uint GetRemove(int index) {
          return remove_[index];
        }
        
        public const int InheritedMembersFieldNumber = 7;
        private pbc::PopsicleList<uint> inheritedMembers_ = new pbc::PopsicleList<uint>();
        [global::System.CLSCompliant(false)]
        public scg::IList<uint> InheritedMembersList {
          get { return pbc::Lists.AsReadOnly(inheritedMembers_); }
        }
        public int InheritedMembersCount {
          get { return inheritedMembers_.Count; }
        }
        [global::System.CLSCompliant(false)]
        public uint GetInheritedMembers(int index) {
          return inheritedMembers_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _chanGroupFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[5], Name);
          }
          if (hasInherited) {
            output.WriteBool(2, field_names[3], Inherited);
          }
          if (hasInherit) {
            output.WriteBool(3, field_names[1], Inherit);
          }
          if (hasInheritable) {
            output.WriteBool(4, field_names[2], Inheritable);
          }
          if (add_.Count > 0) {
            output.WriteUInt32Array(5, field_names[0], add_);
          }
          if (remove_.Count > 0) {
            output.WriteUInt32Array(6, field_names[6], remove_);
          }
          if (inheritedMembers_.Count > 0) {
            output.WriteUInt32Array(7, field_names[4], inheritedMembers_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasName) {
            size += pb::CodedOutputStream.ComputeStringSize(1, Name);
          }
          if (hasInherited) {
            size += pb::CodedOutputStream.ComputeBoolSize(2, Inherited);
          }
          if (hasInherit) {
            size += pb::CodedOutputStream.ComputeBoolSize(3, Inherit);
          }
          if (hasInheritable) {
            size += pb::CodedOutputStream.ComputeBoolSize(4, Inheritable);
          }
          {
            int dataSize = 0;
            foreach (uint element in AddList) {
              dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
            }
            size += dataSize;
            size += 1 * add_.Count;
          }
          {
            int dataSize = 0;
            foreach (uint element in RemoveList) {
              dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
            }
            size += dataSize;
            size += 1 * remove_.Count;
          }
          {
            int dataSize = 0;
            foreach (uint element in InheritedMembersList) {
              dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
            }
            size += dataSize;
            size += 1 * inheritedMembers_.Count;
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ChanGroup ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChanGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChanGroup ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChanGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChanGroup ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChanGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChanGroup ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChanGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChanGroup ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChanGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChanGroup MakeReadOnly() {
          add_.MakeReadOnly();
          remove_.MakeReadOnly();
          inheritedMembers_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChanGroup prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChanGroup, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ChanGroup cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ChanGroup result;
          
          private ChanGroup PrepareBuilder() {
            if (resultIsReadOnly) {
              ChanGroup original = result;
              result = new ChanGroup();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ChanGroup MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mumble.NET.ACL.Types.ChanGroup.Descriptor; }
          }
          
          public override ChanGroup DefaultInstanceForType {
            get { return global::Mumble.NET.ACL.Types.ChanGroup.DefaultInstance; }
          }
          
          public override ChanGroup BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ChanGroup) {
              return MergeFrom((ChanGroup) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ChanGroup other) {
            if (other == global::Mumble.NET.ACL.Types.ChanGroup.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasInherited) {
              Inherited = other.Inherited;
            }
            if (other.HasInherit) {
              Inherit = other.Inherit;
            }
            if (other.HasInheritable) {
              Inheritable = other.Inheritable;
            }
            if (other.add_.Count != 0) {
              result.add_.Add(other.add_);
            }
            if (other.remove_.Count != 0) {
              result.remove_.Add(other.remove_);
            }
            if (other.inheritedMembers_.Count != 0) {
              result.inheritedMembers_.Add(other.inheritedMembers_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_chanGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _chanGroupFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 16: {
                  result.hasInherited = input.ReadBool(ref result.inherited_);
                  break;
                }
                case 24: {
                  result.hasInherit = input.ReadBool(ref result.inherit_);
                  break;
                }
                case 32: {
                  result.hasInheritable = input.ReadBool(ref result.inheritable_);
                  break;
                }
                case 42:
                case 40: {
                  input.ReadUInt32Array(tag, field_name, result.add_);
                  break;
                }
                case 50:
                case 48: {
                  input.ReadUInt32Array(tag, field_name, result.remove_);
                  break;
                }
                case 58:
                case 56: {
                  input.ReadUInt32Array(tag, field_name, result.inheritedMembers_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasInherited {
            get { return result.hasInherited; }
          }
          public bool Inherited {
            get { return result.Inherited; }
            set { SetInherited(value); }
          }
          public Builder SetInherited(bool value) {
            PrepareBuilder();
            result.hasInherited = true;
            result.inherited_ = value;
            return this;
          }
          public Builder ClearInherited() {
            PrepareBuilder();
            result.hasInherited = false;
            result.inherited_ = true;
            return this;
          }
          
          public bool HasInherit {
            get { return result.hasInherit; }
          }
          public bool Inherit {
            get { return result.Inherit; }
            set { SetInherit(value); }
          }
          public Builder SetInherit(bool value) {
            PrepareBuilder();
            result.hasInherit = true;
            result.inherit_ = value;
            return this;
          }
          public Builder ClearInherit() {
            PrepareBuilder();
            result.hasInherit = false;
            result.inherit_ = true;
            return this;
          }
          
          public bool HasInheritable {
            get { return result.hasInheritable; }
          }
          public bool Inheritable {
            get { return result.Inheritable; }
            set { SetInheritable(value); }
          }
          public Builder SetInheritable(bool value) {
            PrepareBuilder();
            result.hasInheritable = true;
            result.inheritable_ = value;
            return this;
          }
          public Builder ClearInheritable() {
            PrepareBuilder();
            result.hasInheritable = false;
            result.inheritable_ = true;
            return this;
          }
          
          [global::System.CLSCompliant(false)]
          public pbc::IPopsicleList<uint> AddList {
            get { return PrepareBuilder().add_; }
          }
          public int AddCount {
            get { return result.AddCount; }
          }
          [global::System.CLSCompliant(false)]
          public uint GetAdd(int index) {
            return result.GetAdd(index);
          }
          [global::System.CLSCompliant(false)]
          public Builder SetAdd(int index, uint value) {
            PrepareBuilder();
            result.add_[index] = value;
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddAdd(uint value) {
            PrepareBuilder();
            result.add_.Add(value);
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddRangeAdd(scg::IEnumerable<uint> values) {
            PrepareBuilder();
            result.add_.Add(values);
            return this;
          }
          public Builder ClearAdd() {
            PrepareBuilder();
            result.add_.Clear();
            return this;
          }
          
          [global::System.CLSCompliant(false)]
          public pbc::IPopsicleList<uint> RemoveList {
            get { return PrepareBuilder().remove_; }
          }
          public int RemoveCount {
            get { return result.RemoveCount; }
          }
          [global::System.CLSCompliant(false)]
          public uint GetRemove(int index) {
            return result.GetRemove(index);
          }
          [global::System.CLSCompliant(false)]
          public Builder SetRemove(int index, uint value) {
            PrepareBuilder();
            result.remove_[index] = value;
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddRemove(uint value) {
            PrepareBuilder();
            result.remove_.Add(value);
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddRangeRemove(scg::IEnumerable<uint> values) {
            PrepareBuilder();
            result.remove_.Add(values);
            return this;
          }
          public Builder ClearRemove() {
            PrepareBuilder();
            result.remove_.Clear();
            return this;
          }
          
          [global::System.CLSCompliant(false)]
          public pbc::IPopsicleList<uint> InheritedMembersList {
            get { return PrepareBuilder().inheritedMembers_; }
          }
          public int InheritedMembersCount {
            get { return result.InheritedMembersCount; }
          }
          [global::System.CLSCompliant(false)]
          public uint GetInheritedMembers(int index) {
            return result.GetInheritedMembers(index);
          }
          [global::System.CLSCompliant(false)]
          public Builder SetInheritedMembers(int index, uint value) {
            PrepareBuilder();
            result.inheritedMembers_[index] = value;
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddInheritedMembers(uint value) {
            PrepareBuilder();
            result.inheritedMembers_.Add(value);
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddRangeInheritedMembers(scg::IEnumerable<uint> values) {
            PrepareBuilder();
            result.inheritedMembers_.Add(values);
            return this;
          }
          public Builder ClearInheritedMembers() {
            PrepareBuilder();
            result.inheritedMembers_.Clear();
            return this;
          }
        }
        static ChanGroup() {
          object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public sealed partial class ChanACL : pb::GeneratedMessage<ChanACL, ChanACL.Builder> {
        private ChanACL() { }
        private static readonly ChanACL defaultInstance = new ChanACL().MakeReadOnly();
        private static readonly string[] _chanACLFieldNames = new string[] { "apply_here", "apply_subs", "deny", "grant", "group", "inherited", "user_id" };
        private static readonly uint[] _chanACLFieldTags = new uint[] { 8, 16, 56, 48, 42, 24, 32 };
        public static ChanACL DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ChanACL DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ChanACL ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ACL_ChanACL__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ChanACL, ChanACL.Builder> InternalFieldAccessors {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ACL_ChanACL__FieldAccessorTable; }
        }
        
        public const int ApplyHereFieldNumber = 1;
        private bool hasApplyHere;
        private bool applyHere_ = true;
        public bool HasApplyHere {
          get { return hasApplyHere; }
        }
        public bool ApplyHere {
          get { return applyHere_; }
        }
        
        public const int ApplySubsFieldNumber = 2;
        private bool hasApplySubs;
        private bool applySubs_ = true;
        public bool HasApplySubs {
          get { return hasApplySubs; }
        }
        public bool ApplySubs {
          get { return applySubs_; }
        }
        
        public const int InheritedFieldNumber = 3;
        private bool hasInherited;
        private bool inherited_ = true;
        public bool HasInherited {
          get { return hasInherited; }
        }
        public bool Inherited {
          get { return inherited_; }
        }
        
        public const int UserIdFieldNumber = 4;
        private bool hasUserId;
        private uint userId_;
        public bool HasUserId {
          get { return hasUserId; }
        }
        [global::System.CLSCompliant(false)]
        public uint UserId {
          get { return userId_; }
        }
        
        public const int GroupFieldNumber = 5;
        private bool hasGroup;
        private string group_ = "";
        public bool HasGroup {
          get { return hasGroup; }
        }
        public string Group {
          get { return group_; }
        }
        
        public const int GrantFieldNumber = 6;
        private bool hasGrant;
        private uint grant_;
        public bool HasGrant {
          get { return hasGrant; }
        }
        [global::System.CLSCompliant(false)]
        public uint Grant {
          get { return grant_; }
        }
        
        public const int DenyFieldNumber = 7;
        private bool hasDeny;
        private uint deny_;
        public bool HasDeny {
          get { return hasDeny; }
        }
        [global::System.CLSCompliant(false)]
        public uint Deny {
          get { return deny_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _chanACLFieldNames;
          if (hasApplyHere) {
            output.WriteBool(1, field_names[0], ApplyHere);
          }
          if (hasApplySubs) {
            output.WriteBool(2, field_names[1], ApplySubs);
          }
          if (hasInherited) {
            output.WriteBool(3, field_names[5], Inherited);
          }
          if (hasUserId) {
            output.WriteUInt32(4, field_names[6], UserId);
          }
          if (hasGroup) {
            output.WriteString(5, field_names[4], Group);
          }
          if (hasGrant) {
            output.WriteUInt32(6, field_names[3], Grant);
          }
          if (hasDeny) {
            output.WriteUInt32(7, field_names[2], Deny);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasApplyHere) {
            size += pb::CodedOutputStream.ComputeBoolSize(1, ApplyHere);
          }
          if (hasApplySubs) {
            size += pb::CodedOutputStream.ComputeBoolSize(2, ApplySubs);
          }
          if (hasInherited) {
            size += pb::CodedOutputStream.ComputeBoolSize(3, Inherited);
          }
          if (hasUserId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(4, UserId);
          }
          if (hasGroup) {
            size += pb::CodedOutputStream.ComputeStringSize(5, Group);
          }
          if (hasGrant) {
            size += pb::CodedOutputStream.ComputeUInt32Size(6, Grant);
          }
          if (hasDeny) {
            size += pb::CodedOutputStream.ComputeUInt32Size(7, Deny);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ChanACL ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChanACL ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChanACL ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChanACL ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChanACL ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChanACL ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChanACL ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChanACL ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChanACL ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChanACL ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChanACL MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChanACL prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChanACL, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ChanACL cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ChanACL result;
          
          private ChanACL PrepareBuilder() {
            if (resultIsReadOnly) {
              ChanACL original = result;
              result = new ChanACL();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ChanACL MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mumble.NET.ACL.Types.ChanACL.Descriptor; }
          }
          
          public override ChanACL DefaultInstanceForType {
            get { return global::Mumble.NET.ACL.Types.ChanACL.DefaultInstance; }
          }
          
          public override ChanACL BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ChanACL) {
              return MergeFrom((ChanACL) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ChanACL other) {
            if (other == global::Mumble.NET.ACL.Types.ChanACL.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasApplyHere) {
              ApplyHere = other.ApplyHere;
            }
            if (other.HasApplySubs) {
              ApplySubs = other.ApplySubs;
            }
            if (other.HasInherited) {
              Inherited = other.Inherited;
            }
            if (other.HasUserId) {
              UserId = other.UserId;
            }
            if (other.HasGroup) {
              Group = other.Group;
            }
            if (other.HasGrant) {
              Grant = other.Grant;
            }
            if (other.HasDeny) {
              Deny = other.Deny;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_chanACLFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _chanACLFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasApplyHere = input.ReadBool(ref result.applyHere_);
                  break;
                }
                case 16: {
                  result.hasApplySubs = input.ReadBool(ref result.applySubs_);
                  break;
                }
                case 24: {
                  result.hasInherited = input.ReadBool(ref result.inherited_);
                  break;
                }
                case 32: {
                  result.hasUserId = input.ReadUInt32(ref result.userId_);
                  break;
                }
                case 42: {
                  result.hasGroup = input.ReadString(ref result.group_);
                  break;
                }
                case 48: {
                  result.hasGrant = input.ReadUInt32(ref result.grant_);
                  break;
                }
                case 56: {
                  result.hasDeny = input.ReadUInt32(ref result.deny_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasApplyHere {
            get { return result.hasApplyHere; }
          }
          public bool ApplyHere {
            get { return result.ApplyHere; }
            set { SetApplyHere(value); }
          }
          public Builder SetApplyHere(bool value) {
            PrepareBuilder();
            result.hasApplyHere = true;
            result.applyHere_ = value;
            return this;
          }
          public Builder ClearApplyHere() {
            PrepareBuilder();
            result.hasApplyHere = false;
            result.applyHere_ = true;
            return this;
          }
          
          public bool HasApplySubs {
            get { return result.hasApplySubs; }
          }
          public bool ApplySubs {
            get { return result.ApplySubs; }
            set { SetApplySubs(value); }
          }
          public Builder SetApplySubs(bool value) {
            PrepareBuilder();
            result.hasApplySubs = true;
            result.applySubs_ = value;
            return this;
          }
          public Builder ClearApplySubs() {
            PrepareBuilder();
            result.hasApplySubs = false;
            result.applySubs_ = true;
            return this;
          }
          
          public bool HasInherited {
            get { return result.hasInherited; }
          }
          public bool Inherited {
            get { return result.Inherited; }
            set { SetInherited(value); }
          }
          public Builder SetInherited(bool value) {
            PrepareBuilder();
            result.hasInherited = true;
            result.inherited_ = value;
            return this;
          }
          public Builder ClearInherited() {
            PrepareBuilder();
            result.hasInherited = false;
            result.inherited_ = true;
            return this;
          }
          
          public bool HasUserId {
            get { return result.hasUserId; }
          }
          [global::System.CLSCompliant(false)]
          public uint UserId {
            get { return result.UserId; }
            set { SetUserId(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetUserId(uint value) {
            PrepareBuilder();
            result.hasUserId = true;
            result.userId_ = value;
            return this;
          }
          public Builder ClearUserId() {
            PrepareBuilder();
            result.hasUserId = false;
            result.userId_ = 0;
            return this;
          }
          
          public bool HasGroup {
            get { return result.hasGroup; }
          }
          public string Group {
            get { return result.Group; }
            set { SetGroup(value); }
          }
          public Builder SetGroup(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasGroup = true;
            result.group_ = value;
            return this;
          }
          public Builder ClearGroup() {
            PrepareBuilder();
            result.hasGroup = false;
            result.group_ = "";
            return this;
          }
          
          public bool HasGrant {
            get { return result.hasGrant; }
          }
          [global::System.CLSCompliant(false)]
          public uint Grant {
            get { return result.Grant; }
            set { SetGrant(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetGrant(uint value) {
            PrepareBuilder();
            result.hasGrant = true;
            result.grant_ = value;
            return this;
          }
          public Builder ClearGrant() {
            PrepareBuilder();
            result.hasGrant = false;
            result.grant_ = 0;
            return this;
          }
          
          public bool HasDeny {
            get { return result.hasDeny; }
          }
          [global::System.CLSCompliant(false)]
          public uint Deny {
            get { return result.Deny; }
            set { SetDeny(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetDeny(uint value) {
            PrepareBuilder();
            result.hasDeny = true;
            result.deny_ = value;
            return this;
          }
          public Builder ClearDeny() {
            PrepareBuilder();
            result.hasDeny = false;
            result.deny_ = 0;
            return this;
          }
        }
        static ChanACL() {
          object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public const int InheritAclsFieldNumber = 2;
    private bool hasInheritAcls;
    private bool inheritAcls_ = true;
    public bool HasInheritAcls {
      get { return hasInheritAcls; }
    }
    public bool InheritAcls {
      get { return inheritAcls_; }
    }
    
    public const int GroupsFieldNumber = 3;
    private pbc::PopsicleList<global::Mumble.NET.ACL.Types.ChanGroup> groups_ = new pbc::PopsicleList<global::Mumble.NET.ACL.Types.ChanGroup>();
    public scg::IList<global::Mumble.NET.ACL.Types.ChanGroup> GroupsList {
      get { return groups_; }
    }
    public int GroupsCount {
      get { return groups_.Count; }
    }
    public global::Mumble.NET.ACL.Types.ChanGroup GetGroups(int index) {
      return groups_[index];
    }
    
    public const int AclsFieldNumber = 4;
    private pbc::PopsicleList<global::Mumble.NET.ACL.Types.ChanACL> acls_ = new pbc::PopsicleList<global::Mumble.NET.ACL.Types.ChanACL>();
    public scg::IList<global::Mumble.NET.ACL.Types.ChanACL> AclsList {
      get { return acls_; }
    }
    public int AclsCount {
      get { return acls_.Count; }
    }
    public global::Mumble.NET.ACL.Types.ChanACL GetAcls(int index) {
      return acls_[index];
    }
    
    public const int QueryFieldNumber = 5;
    private bool hasQuery;
    private bool query_;
    public bool HasQuery {
      get { return hasQuery; }
    }
    public bool Query {
      get { return query_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannelId) return false;
        foreach (global::Mumble.NET.ACL.Types.ChanGroup element in GroupsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _aCLFieldNames;
      if (hasChannelId) {
        output.WriteUInt32(1, field_names[1], ChannelId);
      }
      if (hasInheritAcls) {
        output.WriteBool(2, field_names[3], InheritAcls);
      }
      if (groups_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], groups_);
      }
      if (acls_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], acls_);
      }
      if (hasQuery) {
        output.WriteBool(5, field_names[4], Query);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ChannelId);
      }
      if (hasInheritAcls) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, InheritAcls);
      }
      foreach (global::Mumble.NET.ACL.Types.ChanGroup element in GroupsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::Mumble.NET.ACL.Types.ChanACL element in AclsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasQuery) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Query);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ACL ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ACL ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ACL ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ACL ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ACL ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ACL ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ACL ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ACL ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ACL ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ACL ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ACL MakeReadOnly() {
      groups_.MakeReadOnly();
      acls_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ACL prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ACL, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ACL cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ACL result;
      
      private ACL PrepareBuilder() {
        if (resultIsReadOnly) {
          ACL original = result;
          result = new ACL();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ACL MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ACL.Descriptor; }
      }
      
      public override ACL DefaultInstanceForType {
        get { return global::Mumble.NET.ACL.DefaultInstance; }
      }
      
      public override ACL BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ACL) {
          return MergeFrom((ACL) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ACL other) {
        if (other == global::Mumble.NET.ACL.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        if (other.HasInheritAcls) {
          InheritAcls = other.InheritAcls;
        }
        if (other.groups_.Count != 0) {
          result.groups_.Add(other.groups_);
        }
        if (other.acls_.Count != 0) {
          result.acls_.Add(other.acls_);
        }
        if (other.HasQuery) {
          Query = other.Query;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_aCLFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _aCLFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
            case 16: {
              result.hasInheritAcls = input.ReadBool(ref result.inheritAcls_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.groups_, global::Mumble.NET.ACL.Types.ChanGroup.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.acls_, global::Mumble.NET.ACL.Types.ChanACL.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasQuery = input.ReadBool(ref result.query_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
      
      public bool HasInheritAcls {
        get { return result.hasInheritAcls; }
      }
      public bool InheritAcls {
        get { return result.InheritAcls; }
        set { SetInheritAcls(value); }
      }
      public Builder SetInheritAcls(bool value) {
        PrepareBuilder();
        result.hasInheritAcls = true;
        result.inheritAcls_ = value;
        return this;
      }
      public Builder ClearInheritAcls() {
        PrepareBuilder();
        result.hasInheritAcls = false;
        result.inheritAcls_ = true;
        return this;
      }
      
      public pbc::IPopsicleList<global::Mumble.NET.ACL.Types.ChanGroup> GroupsList {
        get { return PrepareBuilder().groups_; }
      }
      public int GroupsCount {
        get { return result.GroupsCount; }
      }
      public global::Mumble.NET.ACL.Types.ChanGroup GetGroups(int index) {
        return result.GetGroups(index);
      }
      public Builder SetGroups(int index, global::Mumble.NET.ACL.Types.ChanGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_[index] = value;
        return this;
      }
      public Builder SetGroups(int index, global::Mumble.NET.ACL.Types.ChanGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroups(global::Mumble.NET.ACL.Types.ChanGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_.Add(value);
        return this;
      }
      public Builder AddGroups(global::Mumble.NET.ACL.Types.ChanGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroups(scg::IEnumerable<global::Mumble.NET.ACL.Types.ChanGroup> values) {
        PrepareBuilder();
        result.groups_.Add(values);
        return this;
      }
      public Builder ClearGroups() {
        PrepareBuilder();
        result.groups_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Mumble.NET.ACL.Types.ChanACL> AclsList {
        get { return PrepareBuilder().acls_; }
      }
      public int AclsCount {
        get { return result.AclsCount; }
      }
      public global::Mumble.NET.ACL.Types.ChanACL GetAcls(int index) {
        return result.GetAcls(index);
      }
      public Builder SetAcls(int index, global::Mumble.NET.ACL.Types.ChanACL value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.acls_[index] = value;
        return this;
      }
      public Builder SetAcls(int index, global::Mumble.NET.ACL.Types.ChanACL.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.acls_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAcls(global::Mumble.NET.ACL.Types.ChanACL value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.acls_.Add(value);
        return this;
      }
      public Builder AddAcls(global::Mumble.NET.ACL.Types.ChanACL.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.acls_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAcls(scg::IEnumerable<global::Mumble.NET.ACL.Types.ChanACL> values) {
        PrepareBuilder();
        result.acls_.Add(values);
        return this;
      }
      public Builder ClearAcls() {
        PrepareBuilder();
        result.acls_.Clear();
        return this;
      }
      
      public bool HasQuery {
        get { return result.hasQuery; }
      }
      public bool Query {
        get { return result.Query; }
        set { SetQuery(value); }
      }
      public Builder SetQuery(bool value) {
        PrepareBuilder();
        result.hasQuery = true;
        result.query_ = value;
        return this;
      }
      public Builder ClearQuery() {
        PrepareBuilder();
        result.hasQuery = false;
        result.query_ = false;
        return this;
      }
    }
    static ACL() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class QueryUsers : pb::GeneratedMessage<QueryUsers, QueryUsers.Builder> {
    private QueryUsers() { }
    private static readonly QueryUsers defaultInstance = new QueryUsers().MakeReadOnly();
    private static readonly string[] _queryUsersFieldNames = new string[] { "ids", "names" };
    private static readonly uint[] _queryUsersFieldTags = new uint[] { 8, 18 };
    public static QueryUsers DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryUsers DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryUsers ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_QueryUsers__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryUsers, QueryUsers.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_QueryUsers__FieldAccessorTable; }
    }
    
    public const int IdsFieldNumber = 1;
    private pbc::PopsicleList<uint> ids_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> IdsList {
      get { return pbc::Lists.AsReadOnly(ids_); }
    }
    public int IdsCount {
      get { return ids_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetIds(int index) {
      return ids_[index];
    }
    
    public const int NamesFieldNumber = 2;
    private pbc::PopsicleList<string> names_ = new pbc::PopsicleList<string>();
    public scg::IList<string> NamesList {
      get { return pbc::Lists.AsReadOnly(names_); }
    }
    public int NamesCount {
      get { return names_.Count; }
    }
    public string GetNames(int index) {
      return names_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _queryUsersFieldNames;
      if (ids_.Count > 0) {
        output.WriteUInt32Array(1, field_names[0], ids_);
      }
      if (names_.Count > 0) {
        output.WriteStringArray(2, field_names[1], names_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (uint element in IdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * ids_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in NamesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * names_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static QueryUsers ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryUsers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryUsers ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryUsers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryUsers ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryUsers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryUsers ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryUsers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryUsers ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryUsers ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryUsers MakeReadOnly() {
      ids_.MakeReadOnly();
      names_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryUsers prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryUsers, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryUsers cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryUsers result;
      
      private QueryUsers PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryUsers original = result;
          result = new QueryUsers();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryUsers MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.QueryUsers.Descriptor; }
      }
      
      public override QueryUsers DefaultInstanceForType {
        get { return global::Mumble.NET.QueryUsers.DefaultInstance; }
      }
      
      public override QueryUsers BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryUsers) {
          return MergeFrom((QueryUsers) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryUsers other) {
        if (other == global::Mumble.NET.QueryUsers.DefaultInstance) return this;
        PrepareBuilder();
        if (other.ids_.Count != 0) {
          result.ids_.Add(other.ids_);
        }
        if (other.names_.Count != 0) {
          result.names_.Add(other.names_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryUsersFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryUsersFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.ids_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.names_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> IdsList {
        get { return PrepareBuilder().ids_; }
      }
      public int IdsCount {
        get { return result.IdsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetIds(int index) {
        return result.GetIds(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIds(int index, uint value) {
        PrepareBuilder();
        result.ids_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddIds(uint value) {
        PrepareBuilder();
        result.ids_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeIds(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.ids_.Add(values);
        return this;
      }
      public Builder ClearIds() {
        PrepareBuilder();
        result.ids_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> NamesList {
        get { return PrepareBuilder().names_; }
      }
      public int NamesCount {
        get { return result.NamesCount; }
      }
      public string GetNames(int index) {
        return result.GetNames(index);
      }
      public Builder SetNames(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.names_[index] = value;
        return this;
      }
      public Builder AddNames(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.names_.Add(value);
        return this;
      }
      public Builder AddRangeNames(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.names_.Add(values);
        return this;
      }
      public Builder ClearNames() {
        PrepareBuilder();
        result.names_.Clear();
        return this;
      }
    }
    static QueryUsers() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class CryptSetup : pb::GeneratedMessage<CryptSetup, CryptSetup.Builder> {
    private CryptSetup() { }
    private static readonly CryptSetup defaultInstance = new CryptSetup().MakeReadOnly();
    private static readonly string[] _cryptSetupFieldNames = new string[] { "client_nonce", "key", "server_nonce" };
    private static readonly uint[] _cryptSetupFieldTags = new uint[] { 18, 10, 26 };
    public static CryptSetup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CryptSetup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CryptSetup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_CryptSetup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CryptSetup, CryptSetup.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_CryptSetup__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private pb::ByteString key_ = pb::ByteString.Empty;
    public bool HasKey {
      get { return hasKey; }
    }
    public pb::ByteString Key {
      get { return key_; }
    }
    
    public const int ClientNonceFieldNumber = 2;
    private bool hasClientNonce;
    private pb::ByteString clientNonce_ = pb::ByteString.Empty;
    public bool HasClientNonce {
      get { return hasClientNonce; }
    }
    public pb::ByteString ClientNonce {
      get { return clientNonce_; }
    }
    
    public const int ServerNonceFieldNumber = 3;
    private bool hasServerNonce;
    private pb::ByteString serverNonce_ = pb::ByteString.Empty;
    public bool HasServerNonce {
      get { return hasServerNonce; }
    }
    public pb::ByteString ServerNonce {
      get { return serverNonce_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cryptSetupFieldNames;
      if (hasKey) {
        output.WriteBytes(1, field_names[1], Key);
      }
      if (hasClientNonce) {
        output.WriteBytes(2, field_names[0], ClientNonce);
      }
      if (hasServerNonce) {
        output.WriteBytes(3, field_names[2], ServerNonce);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Key);
      }
      if (hasClientNonce) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, ClientNonce);
      }
      if (hasServerNonce) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, ServerNonce);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CryptSetup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CryptSetup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CryptSetup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CryptSetup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CryptSetup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CryptSetup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CryptSetup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CryptSetup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CryptSetup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CryptSetup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CryptSetup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CryptSetup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<CryptSetup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CryptSetup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CryptSetup result;
      
      private CryptSetup PrepareBuilder() {
        if (resultIsReadOnly) {
          CryptSetup original = result;
          result = new CryptSetup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CryptSetup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.CryptSetup.Descriptor; }
      }
      
      public override CryptSetup DefaultInstanceForType {
        get { return global::Mumble.NET.CryptSetup.DefaultInstance; }
      }
      
      public override CryptSetup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CryptSetup) {
          return MergeFrom((CryptSetup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CryptSetup other) {
        if (other == global::Mumble.NET.CryptSetup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasClientNonce) {
          ClientNonce = other.ClientNonce;
        }
        if (other.HasServerNonce) {
          ServerNonce = other.ServerNonce;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cryptSetupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cryptSetupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadBytes(ref result.key_);
              break;
            }
            case 18: {
              result.hasClientNonce = input.ReadBytes(ref result.clientNonce_);
              break;
            }
            case 26: {
              result.hasServerNonce = input.ReadBytes(ref result.serverNonce_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public pb::ByteString Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasClientNonce {
        get { return result.hasClientNonce; }
      }
      public pb::ByteString ClientNonce {
        get { return result.ClientNonce; }
        set { SetClientNonce(value); }
      }
      public Builder SetClientNonce(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientNonce = true;
        result.clientNonce_ = value;
        return this;
      }
      public Builder ClearClientNonce() {
        PrepareBuilder();
        result.hasClientNonce = false;
        result.clientNonce_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasServerNonce {
        get { return result.hasServerNonce; }
      }
      public pb::ByteString ServerNonce {
        get { return result.ServerNonce; }
        set { SetServerNonce(value); }
      }
      public Builder SetServerNonce(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerNonce = true;
        result.serverNonce_ = value;
        return this;
      }
      public Builder ClearServerNonce() {
        PrepareBuilder();
        result.hasServerNonce = false;
        result.serverNonce_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CryptSetup() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ContextActionModify : pb::GeneratedMessage<ContextActionModify, ContextActionModify.Builder> {
    private ContextActionModify() { }
    private static readonly ContextActionModify defaultInstance = new ContextActionModify().MakeReadOnly();
    private static readonly string[] _contextActionModifyFieldNames = new string[] { "action", "context", "operation", "text" };
    private static readonly uint[] _contextActionModifyFieldTags = new uint[] { 10, 24, 32, 18 };
    public static ContextActionModify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContextActionModify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContextActionModify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ContextActionModify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContextActionModify, ContextActionModify.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ContextActionModify__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public enum Context {
        Server = 1,
        Channel = 2,
        User = 4,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public enum Operation {
        Add = 0,
        Remove = 1,
      }
      
    }
    #endregion
    
    public const int ActionFieldNumber = 1;
    private bool hasAction;
    private string action_ = "";
    public bool HasAction {
      get { return hasAction; }
    }
    public string Action {
      get { return action_; }
    }
    
    public const int TextFieldNumber = 2;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int ContextFieldNumber = 3;
    private bool hasContext;
    private uint context_;
    public bool HasContext {
      get { return hasContext; }
    }
    [global::System.CLSCompliant(false)]
    public uint Context {
      get { return context_; }
    }
    
    public const int OperationFieldNumber = 4;
    private bool hasOperation;
    private global::Mumble.NET.ContextActionModify.Types.Operation operation_ = global::Mumble.NET.ContextActionModify.Types.Operation.Add;
    public bool HasOperation {
      get { return hasOperation; }
    }
    public global::Mumble.NET.ContextActionModify.Types.Operation Operation {
      get { return operation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAction) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _contextActionModifyFieldNames;
      if (hasAction) {
        output.WriteString(1, field_names[0], Action);
      }
      if (hasText) {
        output.WriteString(2, field_names[3], Text);
      }
      if (hasContext) {
        output.WriteUInt32(3, field_names[1], Context);
      }
      if (hasOperation) {
        output.WriteEnum(4, field_names[2], (int) Operation, Operation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAction) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Action);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      if (hasContext) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Context);
      }
      if (hasOperation) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Operation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ContextActionModify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContextActionModify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContextActionModify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContextActionModify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContextActionModify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContextActionModify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContextActionModify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContextActionModify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContextActionModify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContextActionModify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContextActionModify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContextActionModify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContextActionModify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContextActionModify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContextActionModify result;
      
      private ContextActionModify PrepareBuilder() {
        if (resultIsReadOnly) {
          ContextActionModify original = result;
          result = new ContextActionModify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContextActionModify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ContextActionModify.Descriptor; }
      }
      
      public override ContextActionModify DefaultInstanceForType {
        get { return global::Mumble.NET.ContextActionModify.DefaultInstance; }
      }
      
      public override ContextActionModify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContextActionModify) {
          return MergeFrom((ContextActionModify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContextActionModify other) {
        if (other == global::Mumble.NET.ContextActionModify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAction) {
          Action = other.Action;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasContext) {
          Context = other.Context;
        }
        if (other.HasOperation) {
          Operation = other.Operation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contextActionModifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contextActionModifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAction = input.ReadString(ref result.action_);
              break;
            }
            case 18: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 24: {
              result.hasContext = input.ReadUInt32(ref result.context_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.operation_, out unknown)) {
                result.hasOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAction {
        get { return result.hasAction; }
      }
      public string Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.hasAction = false;
        result.action_ = "";
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasContext {
        get { return result.hasContext; }
      }
      [global::System.CLSCompliant(false)]
      public uint Context {
        get { return result.Context; }
        set { SetContext(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetContext(uint value) {
        PrepareBuilder();
        result.hasContext = true;
        result.context_ = value;
        return this;
      }
      public Builder ClearContext() {
        PrepareBuilder();
        result.hasContext = false;
        result.context_ = 0;
        return this;
      }
      
      public bool HasOperation {
       get { return result.hasOperation; }
      }
      public global::Mumble.NET.ContextActionModify.Types.Operation Operation {
        get { return result.Operation; }
        set { SetOperation(value); }
      }
      public Builder SetOperation(global::Mumble.NET.ContextActionModify.Types.Operation value) {
        PrepareBuilder();
        result.hasOperation = true;
        result.operation_ = value;
        return this;
      }
      public Builder ClearOperation() {
        PrepareBuilder();
        result.hasOperation = false;
        result.operation_ = global::Mumble.NET.ContextActionModify.Types.Operation.Add;
        return this;
      }
    }
    static ContextActionModify() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ContextAction : pb::GeneratedMessage<ContextAction, ContextAction.Builder> {
    private ContextAction() { }
    private static readonly ContextAction defaultInstance = new ContextAction().MakeReadOnly();
    private static readonly string[] _contextActionFieldNames = new string[] { "action", "channel_id", "session" };
    private static readonly uint[] _contextActionFieldTags = new uint[] { 26, 16, 8 };
    public static ContextAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContextAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContextAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ContextAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContextAction, ContextAction.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ContextAction__FieldAccessorTable; }
    }
    
    public const int SessionFieldNumber = 1;
    private bool hasSession;
    private uint session_;
    public bool HasSession {
      get { return hasSession; }
    }
    [global::System.CLSCompliant(false)]
    public uint Session {
      get { return session_; }
    }
    
    public const int ChannelIdFieldNumber = 2;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public const int ActionFieldNumber = 3;
    private bool hasAction;
    private string action_ = "";
    public bool HasAction {
      get { return hasAction; }
    }
    public string Action {
      get { return action_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAction) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _contextActionFieldNames;
      if (hasSession) {
        output.WriteUInt32(1, field_names[2], Session);
      }
      if (hasChannelId) {
        output.WriteUInt32(2, field_names[1], ChannelId);
      }
      if (hasAction) {
        output.WriteString(3, field_names[0], Action);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Session);
      }
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ChannelId);
      }
      if (hasAction) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Action);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ContextAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContextAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContextAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContextAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContextAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContextAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContextAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContextAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContextAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContextAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContextAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContextAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContextAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContextAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContextAction result;
      
      private ContextAction PrepareBuilder() {
        if (resultIsReadOnly) {
          ContextAction original = result;
          result = new ContextAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContextAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ContextAction.Descriptor; }
      }
      
      public override ContextAction DefaultInstanceForType {
        get { return global::Mumble.NET.ContextAction.DefaultInstance; }
      }
      
      public override ContextAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContextAction) {
          return MergeFrom((ContextAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContextAction other) {
        if (other == global::Mumble.NET.ContextAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSession) {
          Session = other.Session;
        }
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        if (other.HasAction) {
          Action = other.Action;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contextActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contextActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSession = input.ReadUInt32(ref result.session_);
              break;
            }
            case 16: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
            case 26: {
              result.hasAction = input.ReadString(ref result.action_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSession {
        get { return result.hasSession; }
      }
      [global::System.CLSCompliant(false)]
      public uint Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(uint value) {
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = 0;
        return this;
      }
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
      
      public bool HasAction {
        get { return result.hasAction; }
      }
      public string Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.hasAction = false;
        result.action_ = "";
        return this;
      }
    }
    static ContextAction() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class UserList : pb::GeneratedMessage<UserList, UserList.Builder> {
    private UserList() { }
    private static readonly UserList defaultInstance = new UserList().MakeReadOnly();
    private static readonly string[] _userListFieldNames = new string[] { "users" };
    private static readonly uint[] _userListFieldTags = new uint[] { 10 };
    public static UserList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserList, UserList.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserList__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public sealed partial class User : pb::GeneratedMessage<User, User.Builder> {
        private User() { }
        private static readonly User defaultInstance = new User().MakeReadOnly();
        private static readonly string[] _userFieldNames = new string[] { "last_channel", "last_seen", "name", "user_id" };
        private static readonly uint[] _userFieldTags = new uint[] { 32, 26, 18, 8 };
        public static User DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override User DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override User ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserList_User__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<User, User.Builder> InternalFieldAccessors {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserList_User__FieldAccessorTable; }
        }
        
        public const int UserIdFieldNumber = 1;
        private bool hasUserId;
        private uint userId_;
        public bool HasUserId {
          get { return hasUserId; }
        }
        [global::System.CLSCompliant(false)]
        public uint UserId {
          get { return userId_; }
        }
        
        public const int NameFieldNumber = 2;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int LastSeenFieldNumber = 3;
        private bool hasLastSeen;
        private string lastSeen_ = "";
        public bool HasLastSeen {
          get { return hasLastSeen; }
        }
        public string LastSeen {
          get { return lastSeen_; }
        }
        
        public const int LastChannelFieldNumber = 4;
        private bool hasLastChannel;
        private uint lastChannel_;
        public bool HasLastChannel {
          get { return hasLastChannel; }
        }
        [global::System.CLSCompliant(false)]
        public uint LastChannel {
          get { return lastChannel_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasUserId) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _userFieldNames;
          if (hasUserId) {
            output.WriteUInt32(1, field_names[3], UserId);
          }
          if (hasName) {
            output.WriteString(2, field_names[2], Name);
          }
          if (hasLastSeen) {
            output.WriteString(3, field_names[1], LastSeen);
          }
          if (hasLastChannel) {
            output.WriteUInt32(4, field_names[0], LastChannel);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasUserId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, UserId);
          }
          if (hasName) {
            size += pb::CodedOutputStream.ComputeStringSize(2, Name);
          }
          if (hasLastSeen) {
            size += pb::CodedOutputStream.ComputeStringSize(3, LastSeen);
          }
          if (hasLastChannel) {
            size += pb::CodedOutputStream.ComputeUInt32Size(4, LastChannel);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static User ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static User ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static User ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static User ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static User ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static User ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static User ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static User ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static User ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static User ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private User MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(User prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
        public sealed partial class Builder : pb::GeneratedBuilder<User, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(User cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private User result;
          
          private User PrepareBuilder() {
            if (resultIsReadOnly) {
              User original = result;
              result = new User();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override User MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mumble.NET.UserList.Types.User.Descriptor; }
          }
          
          public override User DefaultInstanceForType {
            get { return global::Mumble.NET.UserList.Types.User.DefaultInstance; }
          }
          
          public override User BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is User) {
              return MergeFrom((User) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(User other) {
            if (other == global::Mumble.NET.UserList.Types.User.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasUserId) {
              UserId = other.UserId;
            }
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasLastSeen) {
              LastSeen = other.LastSeen;
            }
            if (other.HasLastChannel) {
              LastChannel = other.LastChannel;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_userFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _userFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasUserId = input.ReadUInt32(ref result.userId_);
                  break;
                }
                case 18: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 26: {
                  result.hasLastSeen = input.ReadString(ref result.lastSeen_);
                  break;
                }
                case 32: {
                  result.hasLastChannel = input.ReadUInt32(ref result.lastChannel_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasUserId {
            get { return result.hasUserId; }
          }
          [global::System.CLSCompliant(false)]
          public uint UserId {
            get { return result.UserId; }
            set { SetUserId(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetUserId(uint value) {
            PrepareBuilder();
            result.hasUserId = true;
            result.userId_ = value;
            return this;
          }
          public Builder ClearUserId() {
            PrepareBuilder();
            result.hasUserId = false;
            result.userId_ = 0;
            return this;
          }
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasLastSeen {
            get { return result.hasLastSeen; }
          }
          public string LastSeen {
            get { return result.LastSeen; }
            set { SetLastSeen(value); }
          }
          public Builder SetLastSeen(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLastSeen = true;
            result.lastSeen_ = value;
            return this;
          }
          public Builder ClearLastSeen() {
            PrepareBuilder();
            result.hasLastSeen = false;
            result.lastSeen_ = "";
            return this;
          }
          
          public bool HasLastChannel {
            get { return result.hasLastChannel; }
          }
          [global::System.CLSCompliant(false)]
          public uint LastChannel {
            get { return result.LastChannel; }
            set { SetLastChannel(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetLastChannel(uint value) {
            PrepareBuilder();
            result.hasLastChannel = true;
            result.lastChannel_ = value;
            return this;
          }
          public Builder ClearLastChannel() {
            PrepareBuilder();
            result.hasLastChannel = false;
            result.lastChannel_ = 0;
            return this;
          }
        }
        static User() {
          object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int UsersFieldNumber = 1;
    private pbc::PopsicleList<global::Mumble.NET.UserList.Types.User> users_ = new pbc::PopsicleList<global::Mumble.NET.UserList.Types.User>();
    public scg::IList<global::Mumble.NET.UserList.Types.User> UsersList {
      get { return users_; }
    }
    public int UsersCount {
      get { return users_.Count; }
    }
    public global::Mumble.NET.UserList.Types.User GetUsers(int index) {
      return users_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Mumble.NET.UserList.Types.User element in UsersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userListFieldNames;
      if (users_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], users_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Mumble.NET.UserList.Types.User element in UsersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserList MakeReadOnly() {
      users_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<UserList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserList result;
      
      private UserList PrepareBuilder() {
        if (resultIsReadOnly) {
          UserList original = result;
          result = new UserList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.UserList.Descriptor; }
      }
      
      public override UserList DefaultInstanceForType {
        get { return global::Mumble.NET.UserList.DefaultInstance; }
      }
      
      public override UserList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserList) {
          return MergeFrom((UserList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserList other) {
        if (other == global::Mumble.NET.UserList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.users_.Count != 0) {
          result.users_.Add(other.users_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.users_, global::Mumble.NET.UserList.Types.User.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Mumble.NET.UserList.Types.User> UsersList {
        get { return PrepareBuilder().users_; }
      }
      public int UsersCount {
        get { return result.UsersCount; }
      }
      public global::Mumble.NET.UserList.Types.User GetUsers(int index) {
        return result.GetUsers(index);
      }
      public Builder SetUsers(int index, global::Mumble.NET.UserList.Types.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_[index] = value;
        return this;
      }
      public Builder SetUsers(int index, global::Mumble.NET.UserList.Types.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUsers(global::Mumble.NET.UserList.Types.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_.Add(value);
        return this;
      }
      public Builder AddUsers(global::Mumble.NET.UserList.Types.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUsers(scg::IEnumerable<global::Mumble.NET.UserList.Types.User> values) {
        PrepareBuilder();
        result.users_.Add(values);
        return this;
      }
      public Builder ClearUsers() {
        PrepareBuilder();
        result.users_.Clear();
        return this;
      }
    }
    static UserList() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class VoiceTarget : pb::GeneratedMessage<VoiceTarget, VoiceTarget.Builder> {
    private VoiceTarget() { }
    private static readonly VoiceTarget defaultInstance = new VoiceTarget().MakeReadOnly();
    private static readonly string[] _voiceTargetFieldNames = new string[] { "id", "targets" };
    private static readonly uint[] _voiceTargetFieldTags = new uint[] { 8, 18 };
    public static VoiceTarget DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VoiceTarget DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VoiceTarget ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_VoiceTarget__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VoiceTarget, VoiceTarget.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_VoiceTarget__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public sealed partial class Target : pb::GeneratedMessage<Target, Target.Builder> {
        private Target() { }
        private static readonly Target defaultInstance = new Target().MakeReadOnly();
        private static readonly string[] _targetFieldNames = new string[] { "channel_id", "children", "group", "links", "session" };
        private static readonly uint[] _targetFieldTags = new uint[] { 16, 40, 26, 32, 8 };
        public static Target DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Target DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Target ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_VoiceTarget_Target__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Target, Target.Builder> InternalFieldAccessors {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_VoiceTarget_Target__FieldAccessorTable; }
        }
        
        public const int SessionFieldNumber = 1;
        private pbc::PopsicleList<uint> session_ = new pbc::PopsicleList<uint>();
        [global::System.CLSCompliant(false)]
        public scg::IList<uint> SessionList {
          get { return pbc::Lists.AsReadOnly(session_); }
        }
        public int SessionCount {
          get { return session_.Count; }
        }
        [global::System.CLSCompliant(false)]
        public uint GetSession(int index) {
          return session_[index];
        }
        
        public const int ChannelIdFieldNumber = 2;
        private bool hasChannelId;
        private uint channelId_;
        public bool HasChannelId {
          get { return hasChannelId; }
        }
        [global::System.CLSCompliant(false)]
        public uint ChannelId {
          get { return channelId_; }
        }
        
        public const int GroupFieldNumber = 3;
        private bool hasGroup;
        private string group_ = "";
        public bool HasGroup {
          get { return hasGroup; }
        }
        public string Group {
          get { return group_; }
        }
        
        public const int LinksFieldNumber = 4;
        private bool hasLinks;
        private bool links_;
        public bool HasLinks {
          get { return hasLinks; }
        }
        public bool Links {
          get { return links_; }
        }
        
        public const int ChildrenFieldNumber = 5;
        private bool hasChildren;
        private bool children_;
        public bool HasChildren {
          get { return hasChildren; }
        }
        public bool Children {
          get { return children_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _targetFieldNames;
          if (session_.Count > 0) {
            output.WriteUInt32Array(1, field_names[4], session_);
          }
          if (hasChannelId) {
            output.WriteUInt32(2, field_names[0], ChannelId);
          }
          if (hasGroup) {
            output.WriteString(3, field_names[2], Group);
          }
          if (hasLinks) {
            output.WriteBool(4, field_names[3], Links);
          }
          if (hasChildren) {
            output.WriteBool(5, field_names[1], Children);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          {
            int dataSize = 0;
            foreach (uint element in SessionList) {
              dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
            }
            size += dataSize;
            size += 1 * session_.Count;
          }
          if (hasChannelId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, ChannelId);
          }
          if (hasGroup) {
            size += pb::CodedOutputStream.ComputeStringSize(3, Group);
          }
          if (hasLinks) {
            size += pb::CodedOutputStream.ComputeBoolSize(4, Links);
          }
          if (hasChildren) {
            size += pb::CodedOutputStream.ComputeBoolSize(5, Children);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Target ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Target ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Target ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Target ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Target ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Target ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Target ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Target ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Target ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Target ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Target MakeReadOnly() {
          session_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Target prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
        public sealed partial class Builder : pb::GeneratedBuilder<Target, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Target cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Target result;
          
          private Target PrepareBuilder() {
            if (resultIsReadOnly) {
              Target original = result;
              result = new Target();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Target MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mumble.NET.VoiceTarget.Types.Target.Descriptor; }
          }
          
          public override Target DefaultInstanceForType {
            get { return global::Mumble.NET.VoiceTarget.Types.Target.DefaultInstance; }
          }
          
          public override Target BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Target) {
              return MergeFrom((Target) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Target other) {
            if (other == global::Mumble.NET.VoiceTarget.Types.Target.DefaultInstance) return this;
            PrepareBuilder();
            if (other.session_.Count != 0) {
              result.session_.Add(other.session_);
            }
            if (other.HasChannelId) {
              ChannelId = other.ChannelId;
            }
            if (other.HasGroup) {
              Group = other.Group;
            }
            if (other.HasLinks) {
              Links = other.Links;
            }
            if (other.HasChildren) {
              Children = other.Children;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_targetFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _targetFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10:
                case 8: {
                  input.ReadUInt32Array(tag, field_name, result.session_);
                  break;
                }
                case 16: {
                  result.hasChannelId = input.ReadUInt32(ref result.channelId_);
                  break;
                }
                case 26: {
                  result.hasGroup = input.ReadString(ref result.group_);
                  break;
                }
                case 32: {
                  result.hasLinks = input.ReadBool(ref result.links_);
                  break;
                }
                case 40: {
                  result.hasChildren = input.ReadBool(ref result.children_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          [global::System.CLSCompliant(false)]
          public pbc::IPopsicleList<uint> SessionList {
            get { return PrepareBuilder().session_; }
          }
          public int SessionCount {
            get { return result.SessionCount; }
          }
          [global::System.CLSCompliant(false)]
          public uint GetSession(int index) {
            return result.GetSession(index);
          }
          [global::System.CLSCompliant(false)]
          public Builder SetSession(int index, uint value) {
            PrepareBuilder();
            result.session_[index] = value;
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddSession(uint value) {
            PrepareBuilder();
            result.session_.Add(value);
            return this;
          }
          [global::System.CLSCompliant(false)]
          public Builder AddRangeSession(scg::IEnumerable<uint> values) {
            PrepareBuilder();
            result.session_.Add(values);
            return this;
          }
          public Builder ClearSession() {
            PrepareBuilder();
            result.session_.Clear();
            return this;
          }
          
          public bool HasChannelId {
            get { return result.hasChannelId; }
          }
          [global::System.CLSCompliant(false)]
          public uint ChannelId {
            get { return result.ChannelId; }
            set { SetChannelId(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetChannelId(uint value) {
            PrepareBuilder();
            result.hasChannelId = true;
            result.channelId_ = value;
            return this;
          }
          public Builder ClearChannelId() {
            PrepareBuilder();
            result.hasChannelId = false;
            result.channelId_ = 0;
            return this;
          }
          
          public bool HasGroup {
            get { return result.hasGroup; }
          }
          public string Group {
            get { return result.Group; }
            set { SetGroup(value); }
          }
          public Builder SetGroup(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasGroup = true;
            result.group_ = value;
            return this;
          }
          public Builder ClearGroup() {
            PrepareBuilder();
            result.hasGroup = false;
            result.group_ = "";
            return this;
          }
          
          public bool HasLinks {
            get { return result.hasLinks; }
          }
          public bool Links {
            get { return result.Links; }
            set { SetLinks(value); }
          }
          public Builder SetLinks(bool value) {
            PrepareBuilder();
            result.hasLinks = true;
            result.links_ = value;
            return this;
          }
          public Builder ClearLinks() {
            PrepareBuilder();
            result.hasLinks = false;
            result.links_ = false;
            return this;
          }
          
          public bool HasChildren {
            get { return result.hasChildren; }
          }
          public bool Children {
            get { return result.Children; }
            set { SetChildren(value); }
          }
          public Builder SetChildren(bool value) {
            PrepareBuilder();
            result.hasChildren = true;
            result.children_ = value;
            return this;
          }
          public Builder ClearChildren() {
            PrepareBuilder();
            result.hasChildren = false;
            result.children_ = false;
            return this;
          }
        }
        static Target() {
          object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return id_; }
    }
    
    public const int TargetsFieldNumber = 2;
    private pbc::PopsicleList<global::Mumble.NET.VoiceTarget.Types.Target> targets_ = new pbc::PopsicleList<global::Mumble.NET.VoiceTarget.Types.Target>();
    public scg::IList<global::Mumble.NET.VoiceTarget.Types.Target> TargetsList {
      get { return targets_; }
    }
    public int TargetsCount {
      get { return targets_.Count; }
    }
    public global::Mumble.NET.VoiceTarget.Types.Target GetTargets(int index) {
      return targets_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _voiceTargetFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[0], Id);
      }
      if (targets_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], targets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      foreach (global::Mumble.NET.VoiceTarget.Types.Target element in TargetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static VoiceTarget ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VoiceTarget ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VoiceTarget ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VoiceTarget ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VoiceTarget ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VoiceTarget ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VoiceTarget ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VoiceTarget ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VoiceTarget ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VoiceTarget ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VoiceTarget MakeReadOnly() {
      targets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VoiceTarget prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<VoiceTarget, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VoiceTarget cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VoiceTarget result;
      
      private VoiceTarget PrepareBuilder() {
        if (resultIsReadOnly) {
          VoiceTarget original = result;
          result = new VoiceTarget();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VoiceTarget MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.VoiceTarget.Descriptor; }
      }
      
      public override VoiceTarget DefaultInstanceForType {
        get { return global::Mumble.NET.VoiceTarget.DefaultInstance; }
      }
      
      public override VoiceTarget BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VoiceTarget) {
          return MergeFrom((VoiceTarget) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VoiceTarget other) {
        if (other == global::Mumble.NET.VoiceTarget.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.targets_.Count != 0) {
          result.targets_.Add(other.targets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_voiceTargetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _voiceTargetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.targets_, global::Mumble.NET.VoiceTarget.Types.Target.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      [global::System.CLSCompliant(false)]
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::Mumble.NET.VoiceTarget.Types.Target> TargetsList {
        get { return PrepareBuilder().targets_; }
      }
      public int TargetsCount {
        get { return result.TargetsCount; }
      }
      public global::Mumble.NET.VoiceTarget.Types.Target GetTargets(int index) {
        return result.GetTargets(index);
      }
      public Builder SetTargets(int index, global::Mumble.NET.VoiceTarget.Types.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.targets_[index] = value;
        return this;
      }
      public Builder SetTargets(int index, global::Mumble.NET.VoiceTarget.Types.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.targets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTargets(global::Mumble.NET.VoiceTarget.Types.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.targets_.Add(value);
        return this;
      }
      public Builder AddTargets(global::Mumble.NET.VoiceTarget.Types.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.targets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTargets(scg::IEnumerable<global::Mumble.NET.VoiceTarget.Types.Target> values) {
        PrepareBuilder();
        result.targets_.Add(values);
        return this;
      }
      public Builder ClearTargets() {
        PrepareBuilder();
        result.targets_.Clear();
        return this;
      }
    }
    static VoiceTarget() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class PermissionQuery : pb::GeneratedMessage<PermissionQuery, PermissionQuery.Builder> {
    private PermissionQuery() { }
    private static readonly PermissionQuery defaultInstance = new PermissionQuery().MakeReadOnly();
    private static readonly string[] _permissionQueryFieldNames = new string[] { "channel_id", "flush", "permissions" };
    private static readonly uint[] _permissionQueryFieldTags = new uint[] { 8, 24, 16 };
    public static PermissionQuery DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PermissionQuery DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PermissionQuery ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_PermissionQuery__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PermissionQuery, PermissionQuery.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_PermissionQuery__FieldAccessorTable; }
    }
    
    public const int ChannelIdFieldNumber = 1;
    private bool hasChannelId;
    private uint channelId_;
    public bool HasChannelId {
      get { return hasChannelId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ChannelId {
      get { return channelId_; }
    }
    
    public const int PermissionsFieldNumber = 2;
    private bool hasPermissions;
    private uint permissions_;
    public bool HasPermissions {
      get { return hasPermissions; }
    }
    [global::System.CLSCompliant(false)]
    public uint Permissions {
      get { return permissions_; }
    }
    
    public const int FlushFieldNumber = 3;
    private bool hasFlush;
    private bool flush_;
    public bool HasFlush {
      get { return hasFlush; }
    }
    public bool Flush {
      get { return flush_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _permissionQueryFieldNames;
      if (hasChannelId) {
        output.WriteUInt32(1, field_names[0], ChannelId);
      }
      if (hasPermissions) {
        output.WriteUInt32(2, field_names[2], Permissions);
      }
      if (hasFlush) {
        output.WriteBool(3, field_names[1], Flush);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChannelId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ChannelId);
      }
      if (hasPermissions) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Permissions);
      }
      if (hasFlush) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Flush);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PermissionQuery ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PermissionQuery ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PermissionQuery ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PermissionQuery ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PermissionQuery ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PermissionQuery ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PermissionQuery ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PermissionQuery ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PermissionQuery ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PermissionQuery ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PermissionQuery MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PermissionQuery prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<PermissionQuery, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PermissionQuery cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PermissionQuery result;
      
      private PermissionQuery PrepareBuilder() {
        if (resultIsReadOnly) {
          PermissionQuery original = result;
          result = new PermissionQuery();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PermissionQuery MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.PermissionQuery.Descriptor; }
      }
      
      public override PermissionQuery DefaultInstanceForType {
        get { return global::Mumble.NET.PermissionQuery.DefaultInstance; }
      }
      
      public override PermissionQuery BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PermissionQuery) {
          return MergeFrom((PermissionQuery) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PermissionQuery other) {
        if (other == global::Mumble.NET.PermissionQuery.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChannelId) {
          ChannelId = other.ChannelId;
        }
        if (other.HasPermissions) {
          Permissions = other.Permissions;
        }
        if (other.HasFlush) {
          Flush = other.Flush;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_permissionQueryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _permissionQueryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChannelId = input.ReadUInt32(ref result.channelId_);
              break;
            }
            case 16: {
              result.hasPermissions = input.ReadUInt32(ref result.permissions_);
              break;
            }
            case 24: {
              result.hasFlush = input.ReadBool(ref result.flush_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChannelId {
        get { return result.hasChannelId; }
      }
      [global::System.CLSCompliant(false)]
      public uint ChannelId {
        get { return result.ChannelId; }
        set { SetChannelId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelId(uint value) {
        PrepareBuilder();
        result.hasChannelId = true;
        result.channelId_ = value;
        return this;
      }
      public Builder ClearChannelId() {
        PrepareBuilder();
        result.hasChannelId = false;
        result.channelId_ = 0;
        return this;
      }
      
      public bool HasPermissions {
        get { return result.hasPermissions; }
      }
      [global::System.CLSCompliant(false)]
      public uint Permissions {
        get { return result.Permissions; }
        set { SetPermissions(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPermissions(uint value) {
        PrepareBuilder();
        result.hasPermissions = true;
        result.permissions_ = value;
        return this;
      }
      public Builder ClearPermissions() {
        PrepareBuilder();
        result.hasPermissions = false;
        result.permissions_ = 0;
        return this;
      }
      
      public bool HasFlush {
        get { return result.hasFlush; }
      }
      public bool Flush {
        get { return result.Flush; }
        set { SetFlush(value); }
      }
      public Builder SetFlush(bool value) {
        PrepareBuilder();
        result.hasFlush = true;
        result.flush_ = value;
        return this;
      }
      public Builder ClearFlush() {
        PrepareBuilder();
        result.hasFlush = false;
        result.flush_ = false;
        return this;
      }
    }
    static PermissionQuery() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class CodecVersion : pb::GeneratedMessage<CodecVersion, CodecVersion.Builder> {
    private CodecVersion() { }
    private static readonly CodecVersion defaultInstance = new CodecVersion().MakeReadOnly();
    private static readonly string[] _codecVersionFieldNames = new string[] { "alpha", "beta", "opus", "prefer_alpha" };
    private static readonly uint[] _codecVersionFieldTags = new uint[] { 8, 16, 32, 24 };
    public static CodecVersion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CodecVersion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CodecVersion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_CodecVersion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CodecVersion, CodecVersion.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_CodecVersion__FieldAccessorTable; }
    }
    
    public const int AlphaFieldNumber = 1;
    private bool hasAlpha;
    private int alpha_;
    public bool HasAlpha {
      get { return hasAlpha; }
    }
    public int Alpha {
      get { return alpha_; }
    }
    
    public const int BetaFieldNumber = 2;
    private bool hasBeta;
    private int beta_;
    public bool HasBeta {
      get { return hasBeta; }
    }
    public int Beta {
      get { return beta_; }
    }
    
    public const int PreferAlphaFieldNumber = 3;
    private bool hasPreferAlpha;
    private bool preferAlpha_ = true;
    public bool HasPreferAlpha {
      get { return hasPreferAlpha; }
    }
    public bool PreferAlpha {
      get { return preferAlpha_; }
    }
    
    public const int OpusFieldNumber = 4;
    private bool hasOpus;
    private bool opus_;
    public bool HasOpus {
      get { return hasOpus; }
    }
    public bool Opus {
      get { return opus_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAlpha) return false;
        if (!hasBeta) return false;
        if (!hasPreferAlpha) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _codecVersionFieldNames;
      if (hasAlpha) {
        output.WriteInt32(1, field_names[0], Alpha);
      }
      if (hasBeta) {
        output.WriteInt32(2, field_names[1], Beta);
      }
      if (hasPreferAlpha) {
        output.WriteBool(3, field_names[3], PreferAlpha);
      }
      if (hasOpus) {
        output.WriteBool(4, field_names[2], Opus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAlpha) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Alpha);
      }
      if (hasBeta) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Beta);
      }
      if (hasPreferAlpha) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, PreferAlpha);
      }
      if (hasOpus) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Opus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CodecVersion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CodecVersion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CodecVersion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CodecVersion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CodecVersion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CodecVersion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CodecVersion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CodecVersion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CodecVersion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CodecVersion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CodecVersion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CodecVersion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<CodecVersion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CodecVersion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CodecVersion result;
      
      private CodecVersion PrepareBuilder() {
        if (resultIsReadOnly) {
          CodecVersion original = result;
          result = new CodecVersion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CodecVersion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.CodecVersion.Descriptor; }
      }
      
      public override CodecVersion DefaultInstanceForType {
        get { return global::Mumble.NET.CodecVersion.DefaultInstance; }
      }
      
      public override CodecVersion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CodecVersion) {
          return MergeFrom((CodecVersion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CodecVersion other) {
        if (other == global::Mumble.NET.CodecVersion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAlpha) {
          Alpha = other.Alpha;
        }
        if (other.HasBeta) {
          Beta = other.Beta;
        }
        if (other.HasPreferAlpha) {
          PreferAlpha = other.PreferAlpha;
        }
        if (other.HasOpus) {
          Opus = other.Opus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_codecVersionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _codecVersionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAlpha = input.ReadInt32(ref result.alpha_);
              break;
            }
            case 16: {
              result.hasBeta = input.ReadInt32(ref result.beta_);
              break;
            }
            case 24: {
              result.hasPreferAlpha = input.ReadBool(ref result.preferAlpha_);
              break;
            }
            case 32: {
              result.hasOpus = input.ReadBool(ref result.opus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAlpha {
        get { return result.hasAlpha; }
      }
      public int Alpha {
        get { return result.Alpha; }
        set { SetAlpha(value); }
      }
      public Builder SetAlpha(int value) {
        PrepareBuilder();
        result.hasAlpha = true;
        result.alpha_ = value;
        return this;
      }
      public Builder ClearAlpha() {
        PrepareBuilder();
        result.hasAlpha = false;
        result.alpha_ = 0;
        return this;
      }
      
      public bool HasBeta {
        get { return result.hasBeta; }
      }
      public int Beta {
        get { return result.Beta; }
        set { SetBeta(value); }
      }
      public Builder SetBeta(int value) {
        PrepareBuilder();
        result.hasBeta = true;
        result.beta_ = value;
        return this;
      }
      public Builder ClearBeta() {
        PrepareBuilder();
        result.hasBeta = false;
        result.beta_ = 0;
        return this;
      }
      
      public bool HasPreferAlpha {
        get { return result.hasPreferAlpha; }
      }
      public bool PreferAlpha {
        get { return result.PreferAlpha; }
        set { SetPreferAlpha(value); }
      }
      public Builder SetPreferAlpha(bool value) {
        PrepareBuilder();
        result.hasPreferAlpha = true;
        result.preferAlpha_ = value;
        return this;
      }
      public Builder ClearPreferAlpha() {
        PrepareBuilder();
        result.hasPreferAlpha = false;
        result.preferAlpha_ = true;
        return this;
      }
      
      public bool HasOpus {
        get { return result.hasOpus; }
      }
      public bool Opus {
        get { return result.Opus; }
        set { SetOpus(value); }
      }
      public Builder SetOpus(bool value) {
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = value;
        return this;
      }
      public Builder ClearOpus() {
        PrepareBuilder();
        result.hasOpus = false;
        result.opus_ = false;
        return this;
      }
    }
    static CodecVersion() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class UserStats : pb::GeneratedMessage<UserStats, UserStats.Builder> {
    private UserStats() { }
    private static readonly UserStats defaultInstance = new UserStats().MakeReadOnly();
    private static readonly string[] _userStatsFieldNames = new string[] { "address", "bandwidth", "celt_versions", "certificates", "from_client", "from_server", "idlesecs", "onlinesecs", "opus", "session", "stats_only", "strong_certificate", "tcp_packets", "tcp_ping_avg", "tcp_ping_var", "udp_packets", "udp_ping_avg", "udp_ping_var", "version" };
    private static readonly uint[] _userStatsFieldTags = new uint[] { 114, 120, 104, 26, 34, 42, 136, 128, 152, 8, 16, 144, 56, 85, 93, 48, 69, 77, 98 };
    public static UserStats DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserStats DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserStats ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserStats__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserStats, UserStats.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserStats__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
      public sealed partial class Stats : pb::GeneratedMessage<Stats, Stats.Builder> {
        private Stats() { }
        private static readonly Stats defaultInstance = new Stats().MakeReadOnly();
        private static readonly string[] _statsFieldNames = new string[] { "good", "late", "lost", "resync" };
        private static readonly uint[] _statsFieldTags = new uint[] { 8, 16, 24, 32 };
        public static Stats DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Stats DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Stats ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserStats_Stats__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Stats, Stats.Builder> InternalFieldAccessors {
          get { return global::Mumble.NET.Messages.internal__static_MumbleProto_UserStats_Stats__FieldAccessorTable; }
        }
        
        public const int GoodFieldNumber = 1;
        private bool hasGood;
        private uint good_;
        public bool HasGood {
          get { return hasGood; }
        }
        [global::System.CLSCompliant(false)]
        public uint Good {
          get { return good_; }
        }
        
        public const int LateFieldNumber = 2;
        private bool hasLate;
        private uint late_;
        public bool HasLate {
          get { return hasLate; }
        }
        [global::System.CLSCompliant(false)]
        public uint Late {
          get { return late_; }
        }
        
        public const int LostFieldNumber = 3;
        private bool hasLost;
        private uint lost_;
        public bool HasLost {
          get { return hasLost; }
        }
        [global::System.CLSCompliant(false)]
        public uint Lost {
          get { return lost_; }
        }
        
        public const int ResyncFieldNumber = 4;
        private bool hasResync;
        private uint resync_;
        public bool HasResync {
          get { return hasResync; }
        }
        [global::System.CLSCompliant(false)]
        public uint Resync {
          get { return resync_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _statsFieldNames;
          if (hasGood) {
            output.WriteUInt32(1, field_names[0], Good);
          }
          if (hasLate) {
            output.WriteUInt32(2, field_names[1], Late);
          }
          if (hasLost) {
            output.WriteUInt32(3, field_names[2], Lost);
          }
          if (hasResync) {
            output.WriteUInt32(4, field_names[3], Resync);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasGood) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, Good);
          }
          if (hasLate) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, Late);
          }
          if (hasLost) {
            size += pb::CodedOutputStream.ComputeUInt32Size(3, Lost);
          }
          if (hasResync) {
            size += pb::CodedOutputStream.ComputeUInt32Size(4, Resync);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Stats ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Stats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Stats ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Stats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Stats ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Stats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Stats ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Stats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Stats ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Stats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Stats MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Stats prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
        public sealed partial class Builder : pb::GeneratedBuilder<Stats, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Stats cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Stats result;
          
          private Stats PrepareBuilder() {
            if (resultIsReadOnly) {
              Stats original = result;
              result = new Stats();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Stats MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mumble.NET.UserStats.Types.Stats.Descriptor; }
          }
          
          public override Stats DefaultInstanceForType {
            get { return global::Mumble.NET.UserStats.Types.Stats.DefaultInstance; }
          }
          
          public override Stats BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Stats) {
              return MergeFrom((Stats) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Stats other) {
            if (other == global::Mumble.NET.UserStats.Types.Stats.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasGood) {
              Good = other.Good;
            }
            if (other.HasLate) {
              Late = other.Late;
            }
            if (other.HasLost) {
              Lost = other.Lost;
            }
            if (other.HasResync) {
              Resync = other.Resync;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_statsFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _statsFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasGood = input.ReadUInt32(ref result.good_);
                  break;
                }
                case 16: {
                  result.hasLate = input.ReadUInt32(ref result.late_);
                  break;
                }
                case 24: {
                  result.hasLost = input.ReadUInt32(ref result.lost_);
                  break;
                }
                case 32: {
                  result.hasResync = input.ReadUInt32(ref result.resync_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasGood {
            get { return result.hasGood; }
          }
          [global::System.CLSCompliant(false)]
          public uint Good {
            get { return result.Good; }
            set { SetGood(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetGood(uint value) {
            PrepareBuilder();
            result.hasGood = true;
            result.good_ = value;
            return this;
          }
          public Builder ClearGood() {
            PrepareBuilder();
            result.hasGood = false;
            result.good_ = 0;
            return this;
          }
          
          public bool HasLate {
            get { return result.hasLate; }
          }
          [global::System.CLSCompliant(false)]
          public uint Late {
            get { return result.Late; }
            set { SetLate(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetLate(uint value) {
            PrepareBuilder();
            result.hasLate = true;
            result.late_ = value;
            return this;
          }
          public Builder ClearLate() {
            PrepareBuilder();
            result.hasLate = false;
            result.late_ = 0;
            return this;
          }
          
          public bool HasLost {
            get { return result.hasLost; }
          }
          [global::System.CLSCompliant(false)]
          public uint Lost {
            get { return result.Lost; }
            set { SetLost(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetLost(uint value) {
            PrepareBuilder();
            result.hasLost = true;
            result.lost_ = value;
            return this;
          }
          public Builder ClearLost() {
            PrepareBuilder();
            result.hasLost = false;
            result.lost_ = 0;
            return this;
          }
          
          public bool HasResync {
            get { return result.hasResync; }
          }
          [global::System.CLSCompliant(false)]
          public uint Resync {
            get { return result.Resync; }
            set { SetResync(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetResync(uint value) {
            PrepareBuilder();
            result.hasResync = true;
            result.resync_ = value;
            return this;
          }
          public Builder ClearResync() {
            PrepareBuilder();
            result.hasResync = false;
            result.resync_ = 0;
            return this;
          }
        }
        static Stats() {
          object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int SessionFieldNumber = 1;
    private bool hasSession;
    private uint session_;
    public bool HasSession {
      get { return hasSession; }
    }
    [global::System.CLSCompliant(false)]
    public uint Session {
      get { return session_; }
    }
    
    public const int StatsOnlyFieldNumber = 2;
    private bool hasStatsOnly;
    private bool statsOnly_;
    public bool HasStatsOnly {
      get { return hasStatsOnly; }
    }
    public bool StatsOnly {
      get { return statsOnly_; }
    }
    
    public const int CertificatesFieldNumber = 3;
    private pbc::PopsicleList<pb::ByteString> certificates_ = new pbc::PopsicleList<pb::ByteString>();
    public scg::IList<pb::ByteString> CertificatesList {
      get { return pbc::Lists.AsReadOnly(certificates_); }
    }
    public int CertificatesCount {
      get { return certificates_.Count; }
    }
    public pb::ByteString GetCertificates(int index) {
      return certificates_[index];
    }
    
    public const int FromClientFieldNumber = 4;
    private bool hasFromClient;
    private global::Mumble.NET.UserStats.Types.Stats fromClient_;
    public bool HasFromClient {
      get { return hasFromClient; }
    }
    public global::Mumble.NET.UserStats.Types.Stats FromClient {
      get { return fromClient_ ?? global::Mumble.NET.UserStats.Types.Stats.DefaultInstance; }
    }
    
    public const int FromServerFieldNumber = 5;
    private bool hasFromServer;
    private global::Mumble.NET.UserStats.Types.Stats fromServer_;
    public bool HasFromServer {
      get { return hasFromServer; }
    }
    public global::Mumble.NET.UserStats.Types.Stats FromServer {
      get { return fromServer_ ?? global::Mumble.NET.UserStats.Types.Stats.DefaultInstance; }
    }
    
    public const int UdpPacketsFieldNumber = 6;
    private bool hasUdpPackets;
    private uint udpPackets_;
    public bool HasUdpPackets {
      get { return hasUdpPackets; }
    }
    [global::System.CLSCompliant(false)]
    public uint UdpPackets {
      get { return udpPackets_; }
    }
    
    public const int TcpPacketsFieldNumber = 7;
    private bool hasTcpPackets;
    private uint tcpPackets_;
    public bool HasTcpPackets {
      get { return hasTcpPackets; }
    }
    [global::System.CLSCompliant(false)]
    public uint TcpPackets {
      get { return tcpPackets_; }
    }
    
    public const int UdpPingAvgFieldNumber = 8;
    private bool hasUdpPingAvg;
    private float udpPingAvg_;
    public bool HasUdpPingAvg {
      get { return hasUdpPingAvg; }
    }
    public float UdpPingAvg {
      get { return udpPingAvg_; }
    }
    
    public const int UdpPingVarFieldNumber = 9;
    private bool hasUdpPingVar;
    private float udpPingVar_;
    public bool HasUdpPingVar {
      get { return hasUdpPingVar; }
    }
    public float UdpPingVar {
      get { return udpPingVar_; }
    }
    
    public const int TcpPingAvgFieldNumber = 10;
    private bool hasTcpPingAvg;
    private float tcpPingAvg_;
    public bool HasTcpPingAvg {
      get { return hasTcpPingAvg; }
    }
    public float TcpPingAvg {
      get { return tcpPingAvg_; }
    }
    
    public const int TcpPingVarFieldNumber = 11;
    private bool hasTcpPingVar;
    private float tcpPingVar_;
    public bool HasTcpPingVar {
      get { return hasTcpPingVar; }
    }
    public float TcpPingVar {
      get { return tcpPingVar_; }
    }
    
    public const int VersionFieldNumber = 12;
    private bool hasVersion;
    private global::Mumble.NET.Version version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public global::Mumble.NET.Version Version {
      get { return version_ ?? global::Mumble.NET.Version.DefaultInstance; }
    }
    
    public const int CeltVersionsFieldNumber = 13;
    private pbc::PopsicleList<int> celtVersions_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CeltVersionsList {
      get { return pbc::Lists.AsReadOnly(celtVersions_); }
    }
    public int CeltVersionsCount {
      get { return celtVersions_.Count; }
    }
    public int GetCeltVersions(int index) {
      return celtVersions_[index];
    }
    
    public const int AddressFieldNumber = 14;
    private bool hasAddress;
    private pb::ByteString address_ = pb::ByteString.Empty;
    public bool HasAddress {
      get { return hasAddress; }
    }
    public pb::ByteString Address {
      get { return address_; }
    }
    
    public const int BandwidthFieldNumber = 15;
    private bool hasBandwidth;
    private uint bandwidth_;
    public bool HasBandwidth {
      get { return hasBandwidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint Bandwidth {
      get { return bandwidth_; }
    }
    
    public const int OnlinesecsFieldNumber = 16;
    private bool hasOnlinesecs;
    private uint onlinesecs_;
    public bool HasOnlinesecs {
      get { return hasOnlinesecs; }
    }
    [global::System.CLSCompliant(false)]
    public uint Onlinesecs {
      get { return onlinesecs_; }
    }
    
    public const int IdlesecsFieldNumber = 17;
    private bool hasIdlesecs;
    private uint idlesecs_;
    public bool HasIdlesecs {
      get { return hasIdlesecs; }
    }
    [global::System.CLSCompliant(false)]
    public uint Idlesecs {
      get { return idlesecs_; }
    }
    
    public const int StrongCertificateFieldNumber = 18;
    private bool hasStrongCertificate;
    private bool strongCertificate_;
    public bool HasStrongCertificate {
      get { return hasStrongCertificate; }
    }
    public bool StrongCertificate {
      get { return strongCertificate_; }
    }
    
    public const int OpusFieldNumber = 19;
    private bool hasOpus;
    private bool opus_;
    public bool HasOpus {
      get { return hasOpus; }
    }
    public bool Opus {
      get { return opus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userStatsFieldNames;
      if (hasSession) {
        output.WriteUInt32(1, field_names[9], Session);
      }
      if (hasStatsOnly) {
        output.WriteBool(2, field_names[10], StatsOnly);
      }
      if (certificates_.Count > 0) {
        output.WriteBytesArray(3, field_names[3], certificates_);
      }
      if (hasFromClient) {
        output.WriteMessage(4, field_names[4], FromClient);
      }
      if (hasFromServer) {
        output.WriteMessage(5, field_names[5], FromServer);
      }
      if (hasUdpPackets) {
        output.WriteUInt32(6, field_names[15], UdpPackets);
      }
      if (hasTcpPackets) {
        output.WriteUInt32(7, field_names[12], TcpPackets);
      }
      if (hasUdpPingAvg) {
        output.WriteFloat(8, field_names[16], UdpPingAvg);
      }
      if (hasUdpPingVar) {
        output.WriteFloat(9, field_names[17], UdpPingVar);
      }
      if (hasTcpPingAvg) {
        output.WriteFloat(10, field_names[13], TcpPingAvg);
      }
      if (hasTcpPingVar) {
        output.WriteFloat(11, field_names[14], TcpPingVar);
      }
      if (hasVersion) {
        output.WriteMessage(12, field_names[18], Version);
      }
      if (celtVersions_.Count > 0) {
        output.WriteInt32Array(13, field_names[2], celtVersions_);
      }
      if (hasAddress) {
        output.WriteBytes(14, field_names[0], Address);
      }
      if (hasBandwidth) {
        output.WriteUInt32(15, field_names[1], Bandwidth);
      }
      if (hasOnlinesecs) {
        output.WriteUInt32(16, field_names[7], Onlinesecs);
      }
      if (hasIdlesecs) {
        output.WriteUInt32(17, field_names[6], Idlesecs);
      }
      if (hasStrongCertificate) {
        output.WriteBool(18, field_names[11], StrongCertificate);
      }
      if (hasOpus) {
        output.WriteBool(19, field_names[8], Opus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Session);
      }
      if (hasStatsOnly) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, StatsOnly);
      }
      {
        int dataSize = 0;
        foreach (pb::ByteString element in CertificatesList) {
          dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * certificates_.Count;
      }
      if (hasFromClient) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, FromClient);
      }
      if (hasFromServer) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, FromServer);
      }
      if (hasUdpPackets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, UdpPackets);
      }
      if (hasTcpPackets) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, TcpPackets);
      }
      if (hasUdpPingAvg) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, UdpPingAvg);
      }
      if (hasUdpPingVar) {
        size += pb::CodedOutputStream.ComputeFloatSize(9, UdpPingVar);
      }
      if (hasTcpPingAvg) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, TcpPingAvg);
      }
      if (hasTcpPingVar) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, TcpPingVar);
      }
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, Version);
      }
      {
        int dataSize = 0;
        foreach (int element in CeltVersionsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * celtVersions_.Count;
      }
      if (hasAddress) {
        size += pb::CodedOutputStream.ComputeBytesSize(14, Address);
      }
      if (hasBandwidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, Bandwidth);
      }
      if (hasOnlinesecs) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, Onlinesecs);
      }
      if (hasIdlesecs) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, Idlesecs);
      }
      if (hasStrongCertificate) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, StrongCertificate);
      }
      if (hasOpus) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, Opus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserStats ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStats ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStats ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserStats ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserStats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserStats ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserStats MakeReadOnly() {
      certificates_.MakeReadOnly();
      celtVersions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserStats prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<UserStats, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserStats cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserStats result;
      
      private UserStats PrepareBuilder() {
        if (resultIsReadOnly) {
          UserStats original = result;
          result = new UserStats();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserStats MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.UserStats.Descriptor; }
      }
      
      public override UserStats DefaultInstanceForType {
        get { return global::Mumble.NET.UserStats.DefaultInstance; }
      }
      
      public override UserStats BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserStats) {
          return MergeFrom((UserStats) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserStats other) {
        if (other == global::Mumble.NET.UserStats.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSession) {
          Session = other.Session;
        }
        if (other.HasStatsOnly) {
          StatsOnly = other.StatsOnly;
        }
        if (other.certificates_.Count != 0) {
          result.certificates_.Add(other.certificates_);
        }
        if (other.HasFromClient) {
          MergeFromClient(other.FromClient);
        }
        if (other.HasFromServer) {
          MergeFromServer(other.FromServer);
        }
        if (other.HasUdpPackets) {
          UdpPackets = other.UdpPackets;
        }
        if (other.HasTcpPackets) {
          TcpPackets = other.TcpPackets;
        }
        if (other.HasUdpPingAvg) {
          UdpPingAvg = other.UdpPingAvg;
        }
        if (other.HasUdpPingVar) {
          UdpPingVar = other.UdpPingVar;
        }
        if (other.HasTcpPingAvg) {
          TcpPingAvg = other.TcpPingAvg;
        }
        if (other.HasTcpPingVar) {
          TcpPingVar = other.TcpPingVar;
        }
        if (other.HasVersion) {
          MergeVersion(other.Version);
        }
        if (other.celtVersions_.Count != 0) {
          result.celtVersions_.Add(other.celtVersions_);
        }
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.HasBandwidth) {
          Bandwidth = other.Bandwidth;
        }
        if (other.HasOnlinesecs) {
          Onlinesecs = other.Onlinesecs;
        }
        if (other.HasIdlesecs) {
          Idlesecs = other.Idlesecs;
        }
        if (other.HasStrongCertificate) {
          StrongCertificate = other.StrongCertificate;
        }
        if (other.HasOpus) {
          Opus = other.Opus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userStatsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userStatsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSession = input.ReadUInt32(ref result.session_);
              break;
            }
            case 16: {
              result.hasStatsOnly = input.ReadBool(ref result.statsOnly_);
              break;
            }
            case 26: {
              input.ReadBytesArray(tag, field_name, result.certificates_);
              break;
            }
            case 34: {
              global::Mumble.NET.UserStats.Types.Stats.Builder subBuilder = global::Mumble.NET.UserStats.Types.Stats.CreateBuilder();
              if (result.hasFromClient) {
                subBuilder.MergeFrom(FromClient);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FromClient = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Mumble.NET.UserStats.Types.Stats.Builder subBuilder = global::Mumble.NET.UserStats.Types.Stats.CreateBuilder();
              if (result.hasFromServer) {
                subBuilder.MergeFrom(FromServer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FromServer = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasUdpPackets = input.ReadUInt32(ref result.udpPackets_);
              break;
            }
            case 56: {
              result.hasTcpPackets = input.ReadUInt32(ref result.tcpPackets_);
              break;
            }
            case 69: {
              result.hasUdpPingAvg = input.ReadFloat(ref result.udpPingAvg_);
              break;
            }
            case 77: {
              result.hasUdpPingVar = input.ReadFloat(ref result.udpPingVar_);
              break;
            }
            case 85: {
              result.hasTcpPingAvg = input.ReadFloat(ref result.tcpPingAvg_);
              break;
            }
            case 93: {
              result.hasTcpPingVar = input.ReadFloat(ref result.tcpPingVar_);
              break;
            }
            case 98: {
              global::Mumble.NET.Version.Builder subBuilder = global::Mumble.NET.Version.CreateBuilder();
              if (result.hasVersion) {
                subBuilder.MergeFrom(Version);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Version = subBuilder.BuildPartial();
              break;
            }
            case 106:
            case 104: {
              input.ReadInt32Array(tag, field_name, result.celtVersions_);
              break;
            }
            case 114: {
              result.hasAddress = input.ReadBytes(ref result.address_);
              break;
            }
            case 120: {
              result.hasBandwidth = input.ReadUInt32(ref result.bandwidth_);
              break;
            }
            case 128: {
              result.hasOnlinesecs = input.ReadUInt32(ref result.onlinesecs_);
              break;
            }
            case 136: {
              result.hasIdlesecs = input.ReadUInt32(ref result.idlesecs_);
              break;
            }
            case 144: {
              result.hasStrongCertificate = input.ReadBool(ref result.strongCertificate_);
              break;
            }
            case 152: {
              result.hasOpus = input.ReadBool(ref result.opus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSession {
        get { return result.hasSession; }
      }
      [global::System.CLSCompliant(false)]
      public uint Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSession(uint value) {
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = 0;
        return this;
      }
      
      public bool HasStatsOnly {
        get { return result.hasStatsOnly; }
      }
      public bool StatsOnly {
        get { return result.StatsOnly; }
        set { SetStatsOnly(value); }
      }
      public Builder SetStatsOnly(bool value) {
        PrepareBuilder();
        result.hasStatsOnly = true;
        result.statsOnly_ = value;
        return this;
      }
      public Builder ClearStatsOnly() {
        PrepareBuilder();
        result.hasStatsOnly = false;
        result.statsOnly_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<pb::ByteString> CertificatesList {
        get { return PrepareBuilder().certificates_; }
      }
      public int CertificatesCount {
        get { return result.CertificatesCount; }
      }
      public pb::ByteString GetCertificates(int index) {
        return result.GetCertificates(index);
      }
      public Builder SetCertificates(int index, pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.certificates_[index] = value;
        return this;
      }
      public Builder AddCertificates(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.certificates_.Add(value);
        return this;
      }
      public Builder AddRangeCertificates(scg::IEnumerable<pb::ByteString> values) {
        PrepareBuilder();
        result.certificates_.Add(values);
        return this;
      }
      public Builder ClearCertificates() {
        PrepareBuilder();
        result.certificates_.Clear();
        return this;
      }
      
      public bool HasFromClient {
       get { return result.hasFromClient; }
      }
      public global::Mumble.NET.UserStats.Types.Stats FromClient {
        get { return result.FromClient; }
        set { SetFromClient(value); }
      }
      public Builder SetFromClient(global::Mumble.NET.UserStats.Types.Stats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromClient = true;
        result.fromClient_ = value;
        return this;
      }
      public Builder SetFromClient(global::Mumble.NET.UserStats.Types.Stats.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFromClient = true;
        result.fromClient_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFromClient(global::Mumble.NET.UserStats.Types.Stats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFromClient &&
            result.fromClient_ != global::Mumble.NET.UserStats.Types.Stats.DefaultInstance) {
            result.fromClient_ = global::Mumble.NET.UserStats.Types.Stats.CreateBuilder(result.fromClient_).MergeFrom(value).BuildPartial();
        } else {
          result.fromClient_ = value;
        }
        result.hasFromClient = true;
        return this;
      }
      public Builder ClearFromClient() {
        PrepareBuilder();
        result.hasFromClient = false;
        result.fromClient_ = null;
        return this;
      }
      
      public bool HasFromServer {
       get { return result.hasFromServer; }
      }
      public global::Mumble.NET.UserStats.Types.Stats FromServer {
        get { return result.FromServer; }
        set { SetFromServer(value); }
      }
      public Builder SetFromServer(global::Mumble.NET.UserStats.Types.Stats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromServer = true;
        result.fromServer_ = value;
        return this;
      }
      public Builder SetFromServer(global::Mumble.NET.UserStats.Types.Stats.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFromServer = true;
        result.fromServer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFromServer(global::Mumble.NET.UserStats.Types.Stats value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFromServer &&
            result.fromServer_ != global::Mumble.NET.UserStats.Types.Stats.DefaultInstance) {
            result.fromServer_ = global::Mumble.NET.UserStats.Types.Stats.CreateBuilder(result.fromServer_).MergeFrom(value).BuildPartial();
        } else {
          result.fromServer_ = value;
        }
        result.hasFromServer = true;
        return this;
      }
      public Builder ClearFromServer() {
        PrepareBuilder();
        result.hasFromServer = false;
        result.fromServer_ = null;
        return this;
      }
      
      public bool HasUdpPackets {
        get { return result.hasUdpPackets; }
      }
      [global::System.CLSCompliant(false)]
      public uint UdpPackets {
        get { return result.UdpPackets; }
        set { SetUdpPackets(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUdpPackets(uint value) {
        PrepareBuilder();
        result.hasUdpPackets = true;
        result.udpPackets_ = value;
        return this;
      }
      public Builder ClearUdpPackets() {
        PrepareBuilder();
        result.hasUdpPackets = false;
        result.udpPackets_ = 0;
        return this;
      }
      
      public bool HasTcpPackets {
        get { return result.hasTcpPackets; }
      }
      [global::System.CLSCompliant(false)]
      public uint TcpPackets {
        get { return result.TcpPackets; }
        set { SetTcpPackets(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTcpPackets(uint value) {
        PrepareBuilder();
        result.hasTcpPackets = true;
        result.tcpPackets_ = value;
        return this;
      }
      public Builder ClearTcpPackets() {
        PrepareBuilder();
        result.hasTcpPackets = false;
        result.tcpPackets_ = 0;
        return this;
      }
      
      public bool HasUdpPingAvg {
        get { return result.hasUdpPingAvg; }
      }
      public float UdpPingAvg {
        get { return result.UdpPingAvg; }
        set { SetUdpPingAvg(value); }
      }
      public Builder SetUdpPingAvg(float value) {
        PrepareBuilder();
        result.hasUdpPingAvg = true;
        result.udpPingAvg_ = value;
        return this;
      }
      public Builder ClearUdpPingAvg() {
        PrepareBuilder();
        result.hasUdpPingAvg = false;
        result.udpPingAvg_ = 0F;
        return this;
      }
      
      public bool HasUdpPingVar {
        get { return result.hasUdpPingVar; }
      }
      public float UdpPingVar {
        get { return result.UdpPingVar; }
        set { SetUdpPingVar(value); }
      }
      public Builder SetUdpPingVar(float value) {
        PrepareBuilder();
        result.hasUdpPingVar = true;
        result.udpPingVar_ = value;
        return this;
      }
      public Builder ClearUdpPingVar() {
        PrepareBuilder();
        result.hasUdpPingVar = false;
        result.udpPingVar_ = 0F;
        return this;
      }
      
      public bool HasTcpPingAvg {
        get { return result.hasTcpPingAvg; }
      }
      public float TcpPingAvg {
        get { return result.TcpPingAvg; }
        set { SetTcpPingAvg(value); }
      }
      public Builder SetTcpPingAvg(float value) {
        PrepareBuilder();
        result.hasTcpPingAvg = true;
        result.tcpPingAvg_ = value;
        return this;
      }
      public Builder ClearTcpPingAvg() {
        PrepareBuilder();
        result.hasTcpPingAvg = false;
        result.tcpPingAvg_ = 0F;
        return this;
      }
      
      public bool HasTcpPingVar {
        get { return result.hasTcpPingVar; }
      }
      public float TcpPingVar {
        get { return result.TcpPingVar; }
        set { SetTcpPingVar(value); }
      }
      public Builder SetTcpPingVar(float value) {
        PrepareBuilder();
        result.hasTcpPingVar = true;
        result.tcpPingVar_ = value;
        return this;
      }
      public Builder ClearTcpPingVar() {
        PrepareBuilder();
        result.hasTcpPingVar = false;
        result.tcpPingVar_ = 0F;
        return this;
      }
      
      public bool HasVersion {
       get { return result.hasVersion; }
      }
      public global::Mumble.NET.Version Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(global::Mumble.NET.Version value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder SetVersion(global::Mumble.NET.Version.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVersion(global::Mumble.NET.Version value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVersion &&
            result.version_ != global::Mumble.NET.Version.DefaultInstance) {
            result.version_ = global::Mumble.NET.Version.CreateBuilder(result.version_).MergeFrom(value).BuildPartial();
        } else {
          result.version_ = value;
        }
        result.hasVersion = true;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> CeltVersionsList {
        get { return PrepareBuilder().celtVersions_; }
      }
      public int CeltVersionsCount {
        get { return result.CeltVersionsCount; }
      }
      public int GetCeltVersions(int index) {
        return result.GetCeltVersions(index);
      }
      public Builder SetCeltVersions(int index, int value) {
        PrepareBuilder();
        result.celtVersions_[index] = value;
        return this;
      }
      public Builder AddCeltVersions(int value) {
        PrepareBuilder();
        result.celtVersions_.Add(value);
        return this;
      }
      public Builder AddRangeCeltVersions(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.celtVersions_.Add(values);
        return this;
      }
      public Builder ClearCeltVersions() {
        PrepareBuilder();
        result.celtVersions_.Clear();
        return this;
      }
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      public pb::ByteString Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBandwidth {
        get { return result.hasBandwidth; }
      }
      [global::System.CLSCompliant(false)]
      public uint Bandwidth {
        get { return result.Bandwidth; }
        set { SetBandwidth(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBandwidth(uint value) {
        PrepareBuilder();
        result.hasBandwidth = true;
        result.bandwidth_ = value;
        return this;
      }
      public Builder ClearBandwidth() {
        PrepareBuilder();
        result.hasBandwidth = false;
        result.bandwidth_ = 0;
        return this;
      }
      
      public bool HasOnlinesecs {
        get { return result.hasOnlinesecs; }
      }
      [global::System.CLSCompliant(false)]
      public uint Onlinesecs {
        get { return result.Onlinesecs; }
        set { SetOnlinesecs(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOnlinesecs(uint value) {
        PrepareBuilder();
        result.hasOnlinesecs = true;
        result.onlinesecs_ = value;
        return this;
      }
      public Builder ClearOnlinesecs() {
        PrepareBuilder();
        result.hasOnlinesecs = false;
        result.onlinesecs_ = 0;
        return this;
      }
      
      public bool HasIdlesecs {
        get { return result.hasIdlesecs; }
      }
      [global::System.CLSCompliant(false)]
      public uint Idlesecs {
        get { return result.Idlesecs; }
        set { SetIdlesecs(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIdlesecs(uint value) {
        PrepareBuilder();
        result.hasIdlesecs = true;
        result.idlesecs_ = value;
        return this;
      }
      public Builder ClearIdlesecs() {
        PrepareBuilder();
        result.hasIdlesecs = false;
        result.idlesecs_ = 0;
        return this;
      }
      
      public bool HasStrongCertificate {
        get { return result.hasStrongCertificate; }
      }
      public bool StrongCertificate {
        get { return result.StrongCertificate; }
        set { SetStrongCertificate(value); }
      }
      public Builder SetStrongCertificate(bool value) {
        PrepareBuilder();
        result.hasStrongCertificate = true;
        result.strongCertificate_ = value;
        return this;
      }
      public Builder ClearStrongCertificate() {
        PrepareBuilder();
        result.hasStrongCertificate = false;
        result.strongCertificate_ = false;
        return this;
      }
      
      public bool HasOpus {
        get { return result.hasOpus; }
      }
      public bool Opus {
        get { return result.Opus; }
        set { SetOpus(value); }
      }
      public Builder SetOpus(bool value) {
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = value;
        return this;
      }
      public Builder ClearOpus() {
        PrepareBuilder();
        result.hasOpus = false;
        result.opus_ = false;
        return this;
      }
    }
    static UserStats() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class RequestBlob : pb::GeneratedMessage<RequestBlob, RequestBlob.Builder> {
    private RequestBlob() { }
    private static readonly RequestBlob defaultInstance = new RequestBlob().MakeReadOnly();
    private static readonly string[] _requestBlobFieldNames = new string[] { "channel_description", "session_comment", "session_texture" };
    private static readonly uint[] _requestBlobFieldTags = new uint[] { 24, 16, 8 };
    public static RequestBlob DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RequestBlob DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RequestBlob ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_RequestBlob__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RequestBlob, RequestBlob.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_RequestBlob__FieldAccessorTable; }
    }
    
    public const int SessionTextureFieldNumber = 1;
    private pbc::PopsicleList<uint> sessionTexture_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> SessionTextureList {
      get { return pbc::Lists.AsReadOnly(sessionTexture_); }
    }
    public int SessionTextureCount {
      get { return sessionTexture_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetSessionTexture(int index) {
      return sessionTexture_[index];
    }
    
    public const int SessionCommentFieldNumber = 2;
    private pbc::PopsicleList<uint> sessionComment_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> SessionCommentList {
      get { return pbc::Lists.AsReadOnly(sessionComment_); }
    }
    public int SessionCommentCount {
      get { return sessionComment_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetSessionComment(int index) {
      return sessionComment_[index];
    }
    
    public const int ChannelDescriptionFieldNumber = 3;
    private pbc::PopsicleList<uint> channelDescription_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ChannelDescriptionList {
      get { return pbc::Lists.AsReadOnly(channelDescription_); }
    }
    public int ChannelDescriptionCount {
      get { return channelDescription_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetChannelDescription(int index) {
      return channelDescription_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _requestBlobFieldNames;
      if (sessionTexture_.Count > 0) {
        output.WriteUInt32Array(1, field_names[2], sessionTexture_);
      }
      if (sessionComment_.Count > 0) {
        output.WriteUInt32Array(2, field_names[1], sessionComment_);
      }
      if (channelDescription_.Count > 0) {
        output.WriteUInt32Array(3, field_names[0], channelDescription_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (uint element in SessionTextureList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * sessionTexture_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in SessionCommentList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * sessionComment_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in ChannelDescriptionList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * channelDescription_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RequestBlob ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestBlob ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestBlob ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RequestBlob ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RequestBlob ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestBlob ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RequestBlob ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RequestBlob ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RequestBlob ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RequestBlob ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RequestBlob MakeReadOnly() {
      sessionTexture_.MakeReadOnly();
      sessionComment_.MakeReadOnly();
      channelDescription_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RequestBlob prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<RequestBlob, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RequestBlob cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RequestBlob result;
      
      private RequestBlob PrepareBuilder() {
        if (resultIsReadOnly) {
          RequestBlob original = result;
          result = new RequestBlob();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RequestBlob MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.RequestBlob.Descriptor; }
      }
      
      public override RequestBlob DefaultInstanceForType {
        get { return global::Mumble.NET.RequestBlob.DefaultInstance; }
      }
      
      public override RequestBlob BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RequestBlob) {
          return MergeFrom((RequestBlob) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RequestBlob other) {
        if (other == global::Mumble.NET.RequestBlob.DefaultInstance) return this;
        PrepareBuilder();
        if (other.sessionTexture_.Count != 0) {
          result.sessionTexture_.Add(other.sessionTexture_);
        }
        if (other.sessionComment_.Count != 0) {
          result.sessionComment_.Add(other.sessionComment_);
        }
        if (other.channelDescription_.Count != 0) {
          result.channelDescription_.Add(other.channelDescription_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestBlobFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestBlobFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.sessionTexture_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.sessionComment_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.channelDescription_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> SessionTextureList {
        get { return PrepareBuilder().sessionTexture_; }
      }
      public int SessionTextureCount {
        get { return result.SessionTextureCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetSessionTexture(int index) {
        return result.GetSessionTexture(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSessionTexture(int index, uint value) {
        PrepareBuilder();
        result.sessionTexture_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddSessionTexture(uint value) {
        PrepareBuilder();
        result.sessionTexture_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeSessionTexture(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.sessionTexture_.Add(values);
        return this;
      }
      public Builder ClearSessionTexture() {
        PrepareBuilder();
        result.sessionTexture_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> SessionCommentList {
        get { return PrepareBuilder().sessionComment_; }
      }
      public int SessionCommentCount {
        get { return result.SessionCommentCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetSessionComment(int index) {
        return result.GetSessionComment(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSessionComment(int index, uint value) {
        PrepareBuilder();
        result.sessionComment_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddSessionComment(uint value) {
        PrepareBuilder();
        result.sessionComment_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeSessionComment(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.sessionComment_.Add(values);
        return this;
      }
      public Builder ClearSessionComment() {
        PrepareBuilder();
        result.sessionComment_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ChannelDescriptionList {
        get { return PrepareBuilder().channelDescription_; }
      }
      public int ChannelDescriptionCount {
        get { return result.ChannelDescriptionCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetChannelDescription(int index) {
        return result.GetChannelDescription(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChannelDescription(int index, uint value) {
        PrepareBuilder();
        result.channelDescription_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddChannelDescription(uint value) {
        PrepareBuilder();
        result.channelDescription_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeChannelDescription(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.channelDescription_.Add(values);
        return this;
      }
      public Builder ClearChannelDescription() {
        PrepareBuilder();
        result.channelDescription_.Clear();
        return this;
      }
    }
    static RequestBlob() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class ServerConfig : pb::GeneratedMessage<ServerConfig, ServerConfig.Builder> {
    private ServerConfig() { }
    private static readonly ServerConfig defaultInstance = new ServerConfig().MakeReadOnly();
    private static readonly string[] _serverConfigFieldNames = new string[] { "allow_html", "image_message_length", "max_bandwidth", "message_length", "welcome_text" };
    private static readonly uint[] _serverConfigFieldTags = new uint[] { 24, 40, 8, 32, 18 };
    public static ServerConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ServerConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerConfig, ServerConfig.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_ServerConfig__FieldAccessorTable; }
    }
    
    public const int MaxBandwidthFieldNumber = 1;
    private bool hasMaxBandwidth;
    private uint maxBandwidth_;
    public bool HasMaxBandwidth {
      get { return hasMaxBandwidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint MaxBandwidth {
      get { return maxBandwidth_; }
    }
    
    public const int WelcomeTextFieldNumber = 2;
    private bool hasWelcomeText;
    private string welcomeText_ = "";
    public bool HasWelcomeText {
      get { return hasWelcomeText; }
    }
    public string WelcomeText {
      get { return welcomeText_; }
    }
    
    public const int AllowHtmlFieldNumber = 3;
    private bool hasAllowHtml;
    private bool allowHtml_;
    public bool HasAllowHtml {
      get { return hasAllowHtml; }
    }
    public bool AllowHtml {
      get { return allowHtml_; }
    }
    
    public const int MessageLengthFieldNumber = 4;
    private bool hasMessageLength;
    private uint messageLength_;
    public bool HasMessageLength {
      get { return hasMessageLength; }
    }
    [global::System.CLSCompliant(false)]
    public uint MessageLength {
      get { return messageLength_; }
    }
    
    public const int ImageMessageLengthFieldNumber = 5;
    private bool hasImageMessageLength;
    private uint imageMessageLength_;
    public bool HasImageMessageLength {
      get { return hasImageMessageLength; }
    }
    [global::System.CLSCompliant(false)]
    public uint ImageMessageLength {
      get { return imageMessageLength_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serverConfigFieldNames;
      if (hasMaxBandwidth) {
        output.WriteUInt32(1, field_names[2], MaxBandwidth);
      }
      if (hasWelcomeText) {
        output.WriteString(2, field_names[4], WelcomeText);
      }
      if (hasAllowHtml) {
        output.WriteBool(3, field_names[0], AllowHtml);
      }
      if (hasMessageLength) {
        output.WriteUInt32(4, field_names[3], MessageLength);
      }
      if (hasImageMessageLength) {
        output.WriteUInt32(5, field_names[1], ImageMessageLength);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMaxBandwidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MaxBandwidth);
      }
      if (hasWelcomeText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, WelcomeText);
      }
      if (hasAllowHtml) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, AllowHtml);
      }
      if (hasMessageLength) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MessageLength);
      }
      if (hasImageMessageLength) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ImageMessageLength);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ServerConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerConfig result;
      
      private ServerConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerConfig original = result;
          result = new ServerConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.ServerConfig.Descriptor; }
      }
      
      public override ServerConfig DefaultInstanceForType {
        get { return global::Mumble.NET.ServerConfig.DefaultInstance; }
      }
      
      public override ServerConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerConfig) {
          return MergeFrom((ServerConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerConfig other) {
        if (other == global::Mumble.NET.ServerConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxBandwidth) {
          MaxBandwidth = other.MaxBandwidth;
        }
        if (other.HasWelcomeText) {
          WelcomeText = other.WelcomeText;
        }
        if (other.HasAllowHtml) {
          AllowHtml = other.AllowHtml;
        }
        if (other.HasMessageLength) {
          MessageLength = other.MessageLength;
        }
        if (other.HasImageMessageLength) {
          ImageMessageLength = other.ImageMessageLength;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxBandwidth = input.ReadUInt32(ref result.maxBandwidth_);
              break;
            }
            case 18: {
              result.hasWelcomeText = input.ReadString(ref result.welcomeText_);
              break;
            }
            case 24: {
              result.hasAllowHtml = input.ReadBool(ref result.allowHtml_);
              break;
            }
            case 32: {
              result.hasMessageLength = input.ReadUInt32(ref result.messageLength_);
              break;
            }
            case 40: {
              result.hasImageMessageLength = input.ReadUInt32(ref result.imageMessageLength_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxBandwidth {
        get { return result.hasMaxBandwidth; }
      }
      [global::System.CLSCompliant(false)]
      public uint MaxBandwidth {
        get { return result.MaxBandwidth; }
        set { SetMaxBandwidth(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxBandwidth(uint value) {
        PrepareBuilder();
        result.hasMaxBandwidth = true;
        result.maxBandwidth_ = value;
        return this;
      }
      public Builder ClearMaxBandwidth() {
        PrepareBuilder();
        result.hasMaxBandwidth = false;
        result.maxBandwidth_ = 0;
        return this;
      }
      
      public bool HasWelcomeText {
        get { return result.hasWelcomeText; }
      }
      public string WelcomeText {
        get { return result.WelcomeText; }
        set { SetWelcomeText(value); }
      }
      public Builder SetWelcomeText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWelcomeText = true;
        result.welcomeText_ = value;
        return this;
      }
      public Builder ClearWelcomeText() {
        PrepareBuilder();
        result.hasWelcomeText = false;
        result.welcomeText_ = "";
        return this;
      }
      
      public bool HasAllowHtml {
        get { return result.hasAllowHtml; }
      }
      public bool AllowHtml {
        get { return result.AllowHtml; }
        set { SetAllowHtml(value); }
      }
      public Builder SetAllowHtml(bool value) {
        PrepareBuilder();
        result.hasAllowHtml = true;
        result.allowHtml_ = value;
        return this;
      }
      public Builder ClearAllowHtml() {
        PrepareBuilder();
        result.hasAllowHtml = false;
        result.allowHtml_ = false;
        return this;
      }
      
      public bool HasMessageLength {
        get { return result.hasMessageLength; }
      }
      [global::System.CLSCompliant(false)]
      public uint MessageLength {
        get { return result.MessageLength; }
        set { SetMessageLength(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMessageLength(uint value) {
        PrepareBuilder();
        result.hasMessageLength = true;
        result.messageLength_ = value;
        return this;
      }
      public Builder ClearMessageLength() {
        PrepareBuilder();
        result.hasMessageLength = false;
        result.messageLength_ = 0;
        return this;
      }
      
      public bool HasImageMessageLength {
        get { return result.hasImageMessageLength; }
      }
      [global::System.CLSCompliant(false)]
      public uint ImageMessageLength {
        get { return result.ImageMessageLength; }
        set { SetImageMessageLength(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetImageMessageLength(uint value) {
        PrepareBuilder();
        result.hasImageMessageLength = true;
        result.imageMessageLength_ = value;
        return this;
      }
      public Builder ClearImageMessageLength() {
        PrepareBuilder();
        result.hasImageMessageLength = false;
        result.imageMessageLength_ = 0;
        return this;
      }
    }
    static ServerConfig() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
  public sealed partial class SuggestConfig : pb::GeneratedMessage<SuggestConfig, SuggestConfig.Builder> {
    private SuggestConfig() { }
    private static readonly SuggestConfig defaultInstance = new SuggestConfig().MakeReadOnly();
    private static readonly string[] _suggestConfigFieldNames = new string[] { "positional", "push_to_talk", "version" };
    private static readonly uint[] _suggestConfigFieldTags = new uint[] { 16, 24, 8 };
    public static SuggestConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SuggestConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SuggestConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_SuggestConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SuggestConfig, SuggestConfig.Builder> InternalFieldAccessors {
      get { return global::Mumble.NET.Messages.internal__static_MumbleProto_SuggestConfig__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint Version {
      get { return version_; }
    }
    
    public const int PositionalFieldNumber = 2;
    private bool hasPositional;
    private bool positional_;
    public bool HasPositional {
      get { return hasPositional; }
    }
    public bool Positional {
      get { return positional_; }
    }
    
    public const int PushToTalkFieldNumber = 3;
    private bool hasPushToTalk;
    private bool pushToTalk_;
    public bool HasPushToTalk {
      get { return hasPushToTalk; }
    }
    public bool PushToTalk {
      get { return pushToTalk_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _suggestConfigFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[2], Version);
      }
      if (hasPositional) {
        output.WriteBool(2, field_names[0], Positional);
      }
      if (hasPushToTalk) {
        output.WriteBool(3, field_names[1], PushToTalk);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
      }
      if (hasPositional) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Positional);
      }
      if (hasPushToTalk) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, PushToTalk);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SuggestConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SuggestConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SuggestConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SuggestConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SuggestConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SuggestConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SuggestConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SuggestConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SuggestConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SuggestConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SuggestConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SuggestConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.555")]
    public sealed partial class Builder : pb::GeneratedBuilder<SuggestConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SuggestConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SuggestConfig result;
      
      private SuggestConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          SuggestConfig original = result;
          result = new SuggestConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SuggestConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mumble.NET.SuggestConfig.Descriptor; }
      }
      
      public override SuggestConfig DefaultInstanceForType {
        get { return global::Mumble.NET.SuggestConfig.DefaultInstance; }
      }
      
      public override SuggestConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SuggestConfig) {
          return MergeFrom((SuggestConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SuggestConfig other) {
        if (other == global::Mumble.NET.SuggestConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasPositional) {
          Positional = other.Positional;
        }
        if (other.HasPushToTalk) {
          PushToTalk = other.PushToTalk;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_suggestConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _suggestConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 16: {
              result.hasPositional = input.ReadBool(ref result.positional_);
              break;
            }
            case 24: {
              result.hasPushToTalk = input.ReadBool(ref result.pushToTalk_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasPositional {
        get { return result.hasPositional; }
      }
      public bool Positional {
        get { return result.Positional; }
        set { SetPositional(value); }
      }
      public Builder SetPositional(bool value) {
        PrepareBuilder();
        result.hasPositional = true;
        result.positional_ = value;
        return this;
      }
      public Builder ClearPositional() {
        PrepareBuilder();
        result.hasPositional = false;
        result.positional_ = false;
        return this;
      }
      
      public bool HasPushToTalk {
        get { return result.hasPushToTalk; }
      }
      public bool PushToTalk {
        get { return result.PushToTalk; }
        set { SetPushToTalk(value); }
      }
      public Builder SetPushToTalk(bool value) {
        PrepareBuilder();
        result.hasPushToTalk = true;
        result.pushToTalk_ = value;
        return this;
      }
      public Builder ClearPushToTalk() {
        PrepareBuilder();
        result.hasPushToTalk = false;
        result.pushToTalk_ = false;
        return this;
      }
    }
    static SuggestConfig() {
      object.ReferenceEquals(global::Mumble.NET.Messages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
