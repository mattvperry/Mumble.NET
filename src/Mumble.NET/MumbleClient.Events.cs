// <auto-generated />

namespace Mumble
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Google.ProtocolBuffers;

    /// <summary>
    /// Generated partial class which contains all the events which MumbleClient throws
    /// when it receives events
    /// </summary>
    public sealed partial class MumbleClient
    {
        /// <summary>
        /// Mapping from concrete message type to a closure which will raise the appropriate event
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        private Dictionary<Type, Action<MumbleClient, IMessage>> messageEventHandlers = new Dictionary<Type, Action<MumbleClient, IMessage>>
        {
            { typeof(Messages.Version), (sender, message) => sender.VersionReceived.RaiseEvent(sender, message) },
            { typeof(Messages.UDPTunnel), (sender, message) => sender.UDPTunnelReceived.RaiseEvent(sender, message) },
            { typeof(Messages.Authenticate), (sender, message) => sender.AuthenticateReceived.RaiseEvent(sender, message) },
            { typeof(Messages.Ping), (sender, message) => sender.PingReceived.RaiseEvent(sender, message) },
            { typeof(Messages.Reject), (sender, message) => sender.RejectReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ServerSync), (sender, message) => sender.ServerSyncReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ChannelRemove), (sender, message) => sender.ChannelRemoveReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ChannelState), (sender, message) => sender.ChannelStateReceived.RaiseEvent(sender, message) },
            { typeof(Messages.UserRemove), (sender, message) => sender.UserRemoveReceived.RaiseEvent(sender, message) },
            { typeof(Messages.UserState), (sender, message) => sender.UserStateReceived.RaiseEvent(sender, message) },
            { typeof(Messages.BanList), (sender, message) => sender.BanListReceived.RaiseEvent(sender, message) },
            { typeof(Messages.TextMessage), (sender, message) => sender.TextMessageReceived.RaiseEvent(sender, message) },
            { typeof(Messages.PermissionDenied), (sender, message) => sender.PermissionDeniedReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ACL), (sender, message) => sender.ACLReceived.RaiseEvent(sender, message) },
            { typeof(Messages.QueryUsers), (sender, message) => sender.QueryUsersReceived.RaiseEvent(sender, message) },
            { typeof(Messages.CryptSetup), (sender, message) => sender.CryptSetupReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ContextActionModify), (sender, message) => sender.ContextActionModifyReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ContextAction), (sender, message) => sender.ContextActionReceived.RaiseEvent(sender, message) },
            { typeof(Messages.UserList), (sender, message) => sender.UserListReceived.RaiseEvent(sender, message) },
            { typeof(Messages.VoiceTarget), (sender, message) => sender.VoiceTargetReceived.RaiseEvent(sender, message) },
            { typeof(Messages.PermissionQuery), (sender, message) => sender.PermissionQueryReceived.RaiseEvent(sender, message) },
            { typeof(Messages.CodecVersion), (sender, message) => sender.CodecVersionReceived.RaiseEvent(sender, message) },
            { typeof(Messages.UserStats), (sender, message) => sender.UserStatsReceived.RaiseEvent(sender, message) },
            { typeof(Messages.RequestBlob), (sender, message) => sender.RequestBlobReceived.RaiseEvent(sender, message) },
            { typeof(Messages.ServerConfig), (sender, message) => sender.ServerConfigReceived.RaiseEvent(sender, message) },
            { typeof(Messages.SuggestConfig), (sender, message) => sender.SuggestConfigReceived.RaiseEvent(sender, message) },
        };

        #region Event Handlers
        /// <summary>
        /// Fires when the client receives a <see cref="Messages.Version" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.Version>> VersionReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.UDPTunnel" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.UDPTunnel>> UDPTunnelReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.Authenticate" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.Authenticate>> AuthenticateReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.Ping" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.Ping>> PingReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.Reject" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.Reject>> RejectReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ServerSync" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ServerSync>> ServerSyncReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ChannelRemove" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ChannelRemove>> ChannelRemoveReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ChannelState" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ChannelState>> ChannelStateReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.UserRemove" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.UserRemove>> UserRemoveReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.UserState" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.UserState>> UserStateReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.BanList" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.BanList>> BanListReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.TextMessage" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.TextMessage>> TextMessageReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.PermissionDenied" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.PermissionDenied>> PermissionDeniedReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ACL" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ACL>> ACLReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.QueryUsers" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.QueryUsers>> QueryUsersReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.CryptSetup" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.CryptSetup>> CryptSetupReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ContextActionModify" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ContextActionModify>> ContextActionModifyReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ContextAction" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ContextAction>> ContextActionReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.UserList" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.UserList>> UserListReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.VoiceTarget" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.VoiceTarget>> VoiceTargetReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.PermissionQuery" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.PermissionQuery>> PermissionQueryReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.CodecVersion" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.CodecVersion>> CodecVersionReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.UserStats" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.UserStats>> UserStatsReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.RequestBlob" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.RequestBlob>> RequestBlobReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.ServerConfig" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.ServerConfig>> ServerConfigReceived;

        /// <summary>
        /// Fires when the client receives a <see cref="Messages.SuggestConfig" /> message.
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal event EventHandler<MessageReceivedEventArgs<Messages.SuggestConfig>> SuggestConfigReceived;

        #endregion
    }
}