<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    var rgx = new Regex(@"^message (\w+?) {$");
    var fileName = this.Host.ResolvePath("Mumble.proto");
    var messages = File.ReadLines(fileName)
                        .Select(l => rgx.Match(l))
                        .Where(r => r.Success)
                        .Select(r => r.Groups[1]);
#>
// <auto-generated />

namespace Mumble.Messages
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;

    /// <summary>
    /// Enumeration of all Mumble protobuf message types
    /// </summary>
    [GeneratedCode("T4", "1.0")]
    internal enum MessageType
    {
<# foreach (var it in messages.Select((message, i) => new { message, i })) { #>
        /// <summary>
        /// <#= it.message #> message type
        /// </summary>
        <#= it.message #> = <#= it.i #>,

<# } #>
    }

    public static partial class Messages
    {
        /// <summary>
        /// Mapping of message types to concrete types
        /// </summary>
        [GeneratedCode("T4", "1.0")]
        internal static Dictionary<MessageType, Type> Types = new Dictionary<MessageType, Type>
        {
<# foreach (var message in messages) { #>
            { MessageType.<#= message #>, typeof(<#= message #>) },
<# } #>
        };
    }
}